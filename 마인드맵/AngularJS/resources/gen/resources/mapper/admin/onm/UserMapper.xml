<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper
    namespace="com.anylogic.iot.api.admin.onm.mapper.UserMapper">


    <!--  사용자 - login -->
    <select id="login" parameterType="Map" resultType="Map">

        SELECT
            user_id
            , id
            , passwd
            , user_name
            , email
            , tel
            , to_char(create_dt,'YYYY-MM-DD hh24:mi:ss') as create_dt
            , del_yn
            , ROW_NUMBER() OVER( order by user_id ) as RNUM 
        FROM sdp.tb_user
        WHERE 1 = 1
            and del_yn = 'N' 
        <if test="searchType != null and (searchType eq 'A'.toString()) and searchText != null and searchText"> 
            and user_id = #{searchText}::int
        </if>

    </select>

    <!--  사용자 - insertUser -->
    <insert id="insertUser" parameterType="Map">

        <selectKey keyProperty="reference_id" resultType="int" order="AFTER">
            SELECT MAX(user_id) FROM sdp.tb_user
        </selectKey>


        INSERT INTO
        sdp.tb_user(
            id
            , passwd
            , user_name
            , email
            , tel
            , create_dt
            , del_yn
        )
        VALUES(
            #{id}
            , #{passwd}
            , #{user_name}
            , #{email}
            , #{tel}
            , now()
            , 'N' 
        )
    </insert>


    <!--  사용자 - dupID -->
    <select id="dupID" parameterType="Map" resultType="Map">

        SELECT
            user_id
            , id
            , passwd
            , user_name
            , email
            , tel
            , to_char(create_dt,'YYYY-MM-DD hh24:mi:ss') as create_dt
            , del_yn
            , ROW_NUMBER() OVER( order by user_id ) as RNUM 
        FROM sdp.tb_user
        WHERE 1 = 1
            and del_yn = 'N' 
        <if test="searchType != null and (searchType eq 'A'.toString()) and searchText != null and searchText"> 
            and user_id = #{searchText}::int
        </if>

    </select>


    <!--  사용자 - logout -->
    <update id="logout" parameterType="Map">
        UPDATE sdp.tb_user
        SET
            id = #{id}
            , passwd = #{passwd}
            , user_name = #{user_name}
            , email = #{email}
            , tel = #{tel}
            , del_yn = #{del_yn}
        WHERE user_id = #{user_id}::int
    </update>


    <!--  사용자 - selectUser -->
    <select id="selectUser" parameterType="Map" resultType="Map">
        <!--  페이징 SQL Header -->
        <include refid="com.anylogic.iot.api.common.mapper.CommonMapper.pagingHeaderSql" />

        SELECT
            user_id
            , id
            , passwd
            , user_name
            , email
            , tel
            , to_char(create_dt,'YYYY-MM-DD hh24:mi:ss') as create_dt
            , del_yn
            , ROW_NUMBER() OVER( order by user_id ) as RNUM 
        FROM sdp.tb_user
        WHERE 1 = 1
            and del_yn = 'N' 
        <if test="searchType != null and (searchType eq 'A'.toString()) and searchText != null and searchText"> 
            and user_id = #{searchText}::int
        </if>

        <!--  페이징 SQL Footer -->
        <include refid="com.anylogic.iot.api.common.mapper.CommonMapper.pagingFooterSql" />
    </select>


    <!--  사용자 Excel - selectUserExcel -->
    <select id="selectUserExcel" parameterType="Map" resultType="Map">

        SELECT
            user_id
            , id
            , passwd
            , user_name
            , email
            , tel
            , to_char(create_dt,'YYYY-MM-DD hh24:mi:ss') as create_dt
            , del_yn
            , ROW_NUMBER() OVER( order by user_id ) as RNUM 
        FROM sdp.tb_user
        WHERE 1 = 1
            and del_yn = 'N' 
        <if test="searchType != null and (searchType eq 'A'.toString()) and searchText != null and searchText"> 
            and user_id = #{searchText}::int
        </if>

    </select>


    <!--  사용자 - updateUser -->
    <update id="updateUser" parameterType="Map">
        UPDATE sdp.tb_user
        SET
            id = #{id}
            , passwd = #{passwd}
            , user_name = #{user_name}
            , email = #{email}
            , tel = #{tel}
            , del_yn = #{del_yn}
        WHERE user_id = #{user_id}::int
    </update>


    <!--  사용자 - deleteUser -->
    <delete id="deleteUser" parameterType="Map">
        UPDATE sdp.tb_user
        SET
            del_yn = 'Y' 
        WHERE user_id = #{user_id}::int
    </delete>

</mapper>
