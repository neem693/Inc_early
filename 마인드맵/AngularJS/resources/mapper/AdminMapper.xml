<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.anylogic.iot.api.admin.mapper.AdminMapper">


	<select id="selectModelInfo" parameterType="Map" resultType="Map">
select modelnm, allcnt, daycnt, e_daycnt, cnnncnt, devmodelseq as devmodelseq from 
(
select a.dev_model_seq as devmodelseq, count(b.dev_model_seq) as allcnt, max(a.dev_model_nm) as modelnm from DEV_MODEL_BAS a  left join SPOT_DEV_BAS b
on a.dev_model_seq = b.dev_model_seq 
where a.del_yn = 'N'
and b.del_yn = 'N'
and b.use_yn = 'Y'
and b.svc_tgt_seq in (SELECT svc_Tgt_Seq 
			FROM svc_tgt_bas
			where del_yn = 'N'
			<if test="dstrCd != null and !dstrCd.isEmpty()">
			and dstr_cd = #{dstrCd} 
			</if>
			<if test="svcThemeCd != null and !svcThemeCd.isEmpty()">
			and svc_theme_cd = #{svcThemeCd} 
			</if>
			<if test="unitSvcCd != null and !unitSvcCd.isEmpty()">
			and unit_svc_cd = #{unitSvcCd} 
			</if>
			) 
group by a.dev_model_seq
) aaa 
left join
(
select a.dev_model_seq, count(a.dev_model_seq) as daycnt, max(b.cret_dt), max(b.spot_dev_seq) spot_dev_seq from DEV_MODEL_BAS a join SPOT_DEV_BAS b
on a.dev_model_seq = b.dev_model_seq
where to_char(b.cret_dt,'YYYYMMDD') <![CDATA[ > ]]> to_char(now(), 'YYYYMMDD')
and a.del_yn = 'N'
and b.del_yn = 'N'
and b.use_yn = 'Y'
group by a.dev_model_seq
) bbb 
on aaa.devmodelseq = bbb.dev_model_seq 
left join 
(
select b.spot_dev_seq, count(b.spot_dev_seq) as e_daycnt from SPOT_DEV_BAS a join evet_outb_stat b
on a.spot_dev_seq = b.spot_dev_seq
where to_char( b.cret_dt,'YYYYMMDDHH24MISS') <![CDATA[ > ]]> to_char(now() - interval '12 hour', 'YYYYMMDDHH24MISS') 
and a.del_yn = 'N'
and a.use_yn = 'Y'
group by b.spot_dev_seq
) ccc
on bbb.spot_dev_seq = ccc.spot_dev_seq
left join
(
select spot_dev_seq, count( spot_dev_seq) as cnnncnt  from rtime_dev_data_upd_txn 
			where svc_tgt_seq in (SELECT svc_Tgt_Seq 
			FROM svc_tgt_bas
			where del_yn = 'N'
			<if test="dstrCd != null and !dstrCd.isEmpty()">
			and dstr_cd = #{dstrCd} 
			</if>
			<if test="svcThemeCd != null and !svcThemeCd.isEmpty()">
			and svc_theme_cd = #{svcThemeCd} 
			</if>
			<if test="unitSvcCd != null and !unitSvcCd.isEmpty()">
			and unit_svc_cd = #{unitSvcCd} 
			</if>
			) 
and to_char(upd_dt,'YYYYMMDDHH24MISS') <![CDATA[ > ]]> to_char(now() - interval '12 hour', 'YYYYMMDDHH24MISS')
 group by spot_dev_seq, svc_Tgt_Seq
) ddd
on bbb.spot_dev_seq = ddd.spot_dev_seq
order by allcnt desc, daycnt desc limit 10
</select>
  
  
	<select id="listDevTagStream" parameterType="Map" resultType="Map">
	select 'TagStream' as snsnTagTypeCdNm,
			tag_strm_id as snsnTagNm,
			tag_strm_unit_val as snsnTagUnitCdNm,
			use_yn as useYn
	from tag_strm_bas
	where dev_model_seq =  #{devModelSeq}
	and del_yn = 'N'
	
	</select>

	<!-- 관리자 목록 -->
	<select id="listAdmin" parameterType="Map" resultType="Map">

	</select>

	<select id="listAdminExcel" parameterType="Map" resultType="Map">
		
	</select>


	<!-- 관리자 상세 -->
	<select id="selectAdmin" parameterType="Map" resultType="Map">
		SELECT
			  user_id as userId
			, role_id as roleId
			, user_nm as userNm
			, mphon_no as mphonNo
			, tel_no as telNo
			, email_adr as emailAdr
			, rmark as rmark
		FROM USER_BAS
		WHERE user_id = #{userId}
	</select>

	<select id="dupliCheck" parameterType="Map" resultType="Integer">
		SELECT COUNT(*) FROM USER_BAS WHERE user_id = #{userId}
	</select>

	<!-- 관리자 등록 -->
	<insert id="insertAdmin" parameterType="Map">
		INSERT INTO USER_BAS(
			  user_id
			, role_id
			, unit_svc_cd
			, user_nm
			, pwd
			, mphon_no
			, tel_no
			, email_adr
			, user_clas_cd
			, svc_tgt_seq
			, rmark
			, del_yn
			, cretr_id
			, cret_dt
		)
		VALUES(
			  #{userId}
			, #{roleId}
			, #{uniSvcCd}
			, #{userNm}
			, #{pwd}
			, #{mphonNo}
			, #{telNo}
			, #{emailAdr}
			, #{userClasCd}
			, #{svcTgSeq}
			, #{rmark}
			, 'N'
			, #{cretrId}
			, now()
		)
	</insert>

	<!-- 관리자 관리 엑셀 업로드 -->
	<insert id="insertAdminExcel" parameterType="Map">
		INSERT INTO USER_BAS(
			  user_id
			, pwd
			, user_nm
			, role_id
			, mphon_no
			, tel_no
			, email_adr
			, rmark
			, del_yn
			, cret_dt
		)
		VALUES(
			  #{userId}
			<!-- , 'new1234!' -->
			, #{password}
			, #{userNm}
			, #{roleId}
			, #{mphonNo}
			, #{telNo}
			, #{emailAdr}
			, #{rmark}
			, 'N'
			, now()
		)
	</insert>

	<select id="pwdCheck" parameterType="Map" resultType="Integer">
		SELECT COUNT(*) FROM USER_BAS WHERE user_id = #{userId} AND pwd = #{pwd}
	</select>

	<!-- 관리자 수정 -->
	<update id="updateAdmin" parameterType="Map">
		UPDATE USER_BAS
		SET
			  user_nm = #{userNm}
			, role_id = #{roleId}
			, mphon_no = #{mphonNo}
			, tel_no = #{telNo}
			, email_adr = #{emailAdr}
			, rmark = #{rmark}
			, amdr_id = #{amdrId}
			, amd_dt = now()
		WHERE user_id = #{userId}
	</update>


	<!-- 관리자 삭제 -->
	<update id="deleteAdmin" parameterType="Map">
		UPDATE USER_BAS
		SET
			  del_yn = 'Y'
			, amdr_id = #{amdrId}
			, amd_dt = now()
		WHERE user_id = #{userId}
	</update>


	<!-- 사용자 범쉬 서비스 목록 -->
	<select id="listUserSvcCoverage" parameterType="Map" resultType="Map">
		SELECT
			  dstr_cd as dstrCd
			, svc_theme_cd as svcThemeCd
			, unit_svc_cd as unitSvcCd
		FROM USER_BY_UNIT_SVC_REL
		WHERE del_yn = 'N'
		AND user_id = #{userId}
	</select>


	<!-- 사용자 범위 서비스 등록 -->
	<insert id="insertUserSvcCoverage" parameterType="Map">

		<foreach collection="userSvcCoverageList" item="item" separator=" ; ">
			INSERT INTO USER_BY_UNIT_SVC_REL(
				  user_id
				, del_yn
				, cretr_id
				, cret_dt
				, dstr_cd
				, svc_theme_cd
				, unit_svc_cd
			)VALUES(
				  #{userId}
				, 'N'
				, #{amdrId}
				, now()
				, #{item.dstrCd}
				, #{item.svcThemeCd}
				, #{item.unitSvcCd}
			)
		</foreach>

	</insert>


	<!-- 사용자 범쉬 서비스 삭제 -->
	<delete id="deleteUserSvcCoverage" parameterType="Map">
		DELETE FROM USER_BY_UNIT_SVC_REL
		WHERE user_id = #{userId}
	</delete>


</mapper>




