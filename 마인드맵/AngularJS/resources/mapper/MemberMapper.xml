<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.anylogic.iot.api.admin.member.mapper.MemberMapper">

	<sql id="selectMemberListSql">
		SELECT
				ROW_NUMBER() OVER (ORDER BY reg_dt DESC, member_id DESC) AS RNUM
				, member_id
				, office_rent_id
				, company_name
				, id
				, nm
				, dept_nm
				, hp_no
				, email
				, CASE WHEN type=1 THEN '오피스/지정데스크' WHEN type=2 THEN '스마트데스크' WHEN type=3 THEN '일반' WHEN type=4 THEN '관리자' ELSE '알수없음' END as type 
				, CASE 	WHEN aply_class='SA' THEN '시스템관리자' 
						WHEN aply_class='SU' THEN '시스템사용자' 
						WHEN aply_class='AU' THEN '총무' 
						WHEN aply_class='A' THEN '입주사관리자' 
						WHEN aply_class='G' THEN '입주사직원'
						WHEN aply_class='O' THEN '일반'
						ELSE aply_class END as aply_class
				, CASE 	WHEN state='S' THEN '정상' 
						WHEN state='O' THEN '탈퇴' 
						WHEN state='G' THEN '정상' 
						ELSE state END as state
				, permit_yn
				, reg_dt
				, qr_code
		FROM saehan.tb_member
		WHERE state IN ('S', 'G', 'O') AND type <![CDATA[<=]]> 3 AND aply_class IN ('A', 'G', 'O')
		<if test="nm != null and nm != ''">
			AND nm LIKE CONCAT('%', #{nm}, '%')
		</if>
		<if test="id != null and id != ''">
			AND id LIKE CONCAT('%', #{id}, '%')
		</if>
		<if test="company_name != null and company_name != ''">
			AND company_name LIKE CONCAT('%', #{company_name}, '%')
		</if>
		<if test="type != null and type != ''">
			AND type = #{type}::int
		</if>
		<if test="permit_yn != null and permit_yn != ''">
			AND permit_yn = #{permit_yn} AND type = 1
		</if>
		<if test="date_from != null and date_from != ''">
			AND reg_dt <![CDATA[>=]]>  #{date_from}::date
		</if>
		<if test="date_to != null and date_to != ''">
			AND reg_dt <![CDATA[<=]]>  #{date_to}::date
		</if>
		<if test="checkout_yn != null and checkout_yn != ''">
			AND state = #{checkout_yn}
		</if>
	</sql>

	<select id="selectMemberList" parameterType="Map" resultType="Map">
    	<include refid="com.anylogic.iot.api.common.mapper.CommonMapper.pagingHeaderSql"/>
    	<include refid="selectMemberListSql"/>
		<include refid="com.anylogic.iot.api.common.mapper.CommonMapper.pagingFooterSql"/>
	</select>

	<select id="selectMemberListAll" parameterType="Map" resultType="Map">
    	<include refid="selectMemberListSql"/>
	</select>

	<select id="selectMemberListExcel" parameterType="Map" resultType="com.anylogic.iot.api.admin.member.vo.MemberInfoVO">
    	<include refid="selectMemberListSql"/>
	</select>
	
	<update id="updateMemberList" parameterType="Map">
		UPDATE saehan.tb_member
		SET
			  state = 'D'
		WHERE member_id = #{member_id}::int
	</update> 

	<update id="updateMemberPermit" parameterType="Map">
		UPDATE saehan.tb_member
		SET
			  permit_yn = #{permit_yn}
			  , qr_code = #{qr_code}

		WHERE member_id = #{member_id}::int
	</update> 

<!--  TODO 
	<select id="getBuyingTime" parameterType="Map" resultType="Map">
		SELECT 	
				PP.member_id
				, PP.office_rent_id
				, PP.product_id
				, sum(buy_time) as buy_time

		FROM 	(
				 saehan.tb_purchase_product
				 ) PP
				 , ()saehan.tb_product P
		WHERE
			 PP.member_id = #{member_id}::int AND PP.office_rent_id = #{office_rent_id}::int
			 AND PP.product_id = P.product_id
		GROUP BY PP.member_id, PP.office_rent_id, PP.product_id
	</select>
 -->
	
	
	<select id="selectMemberDetail" parameterType="Map" resultType="Map">
		SELECT
				M.member_id
				, M.office_rent_id
				, CONCAT(M.company_name, ' / ', O.rep_office_name) as company_desc
				, M.id
				, M.nm
				, M.dept_nm
				, M.hp_no
				, M.email
				, M.type
				, M.aply_class
				, M.state
				, M.position_name
				, O.rent_strt_dt
				, O.rent_end_dt
				, O.default_time
				, (select file_path from saehan.tb_attach_file where reference_id =cast(#{member_id} as numeric) and table_name = 'tb_member' ORDER BY attach_file_id DESC LIMIT 1) as file_path
				, (select file_name from saehan.tb_attach_file where reference_id =cast(#{member_id} as numeric) and table_name = 'tb_member' ORDER BY attach_file_id DESC LIMIT 1) as file_name
		
		FROM 	saehan.tb_member M 
				LEFT JOIN saehan.tb_office_rent O ON M.office_rent_id = O.office_rent_id 
		WHERE M.member_id = #{member_id}::int
	</select>
	
	<update id="updateMemberDetail" parameterType="Map">
		UPDATE saehan.tb_member
		SET  
			  state = #{state}
			  
			  <if test="company_name != null and company_name != ''">
			 ,company_name = #{company_name}
			  </if>
			   <if test="permit_yn != null and permit_yn != ''">
			 ,permit_yn = #{permit_yn}
			  </if>
			  <if test="aply_class != null and aply_class != ''">
			 ,aply_class = #{aply_class}
			  </if>
			 
			  <if test="type != null and type != ''">
			 ,type = #{type}::int
			  </if>
			  
			  <if test="office_rent_id != null and office_rent_id != ''">
			  ,office_rent_id = #{office_rent_id}::int
			  </if>
			   <if test="qr_code != null and qr_code != ''">
			  ,qr_code = #{qr_code}
			  </if>

		WHERE member_id = #{member_id}::int
	</update> 

	<sql id="selectSendingHistoryListSql">
		SELECT
				ROW_NUMBER() OVER (ORDER BY create_date DESC, log_id DESC) AS RNUM
				, log_type
				, log_id 
				, member_id
				, create_date
				, title
				, CASE WHEN type = 'A' THEN '회원전체' WHEN type = 'I' THEN '개인' ELSE type END as type
		FROM (
				<if test="log_type == null or log_type == '' or log_type == 'SMS'">
				SELECT 
						'SMS' as log_type
						, sms_log_id as log_id
						, member_id
						, create_date
						, contents as title
						, type
				FROM	
						saehan.tb_sms_log
						
				WHERE	1=1
					<if test="type != null and type != ''">
						AND type = #{type}
					</if>
					<if test="date_from != null and date_from != ''">
						AND create_date <![CDATA[>=]]>  #{date_from}::date
					</if>
					<if test="date_to != null and date_to != ''">
						AND create_date <![CDATA[<=]]>  #{date_to}::date
					</if>
				</if>

				<if test="log_type == null or log_type == ''">
				UNION
				</if>
						
				<if test="log_type == null or log_type == '' or log_type == 'E-mail'">
				SELECT 
						'E-mail' as log_type
						, email_log_id as log_id
						, member_id
						, create_date
						, title
						, type
				FROM	
						saehan.tb_email_log
						
				WHERE	1=1
					<if test="type != null and type != ''">
						AND type = #{type}
					</if>
					<if test="date_from != null and date_from != ''">
						AND create_date <![CDATA[>=]]>  #{date_from}::date
					</if>
					<if test="date_to != null and date_to != ''">
						AND create_date <![CDATA[<=]]>  #{date_to}::date
					</if>
				</if>
			 ) A
	</sql>

	<select id="selectSendingHistoryList" parameterType="Map" resultType="Map">
    	<include refid="com.anylogic.iot.api.common.mapper.CommonMapper.pagingHeaderSql"/>
    	<include refid="selectSendingHistoryListSql"/>
		<include refid="com.anylogic.iot.api.common.mapper.CommonMapper.pagingFooterSql"/>
	</select>
	
	<delete id="deleteSendingHistoryList" parameterType="Map">
		<choose>
			<when test="log_type == 'SMS'">
				DELETE FROM saehan.tb_sms_log WHERE sms_log_id = #{log_id}::int
			</when>
			<otherwise>
				DELETE FROM saehan.tb_email_log WHERE email_log_id = #{log_id}::int
			</otherwise>
		</choose>
	</delete>

	<!--  // 상세 전송 목록 제거 : 실제 테이블 없음 -->
	<delete id="deleteSendingHistoryListDetail" parameterType="Map">
		<choose>
			<when test="log_type == 'SMS'">
				DELETE FROM saehan.tb_sms_log_detail WHERE sms_log_id = #{log_id}:int
			</when>
			<otherwise>
				DELETE FROM saehan.tb_email_log_detail WHERE email_log_id = #{log_id}:int
			</otherwise>
		</choose>
	</delete>

	<select id="selectSendingHistoryDetail" parameterType="Map" resultType="Map">
		<if test="log_type == null or log_type == '' or log_type == 'SMS'">
		SELECT 
				'SMS' as log_type
				, sms_log_id as log_id
				, member_id
				, create_date
				, contents
				, type
		FROM	
				saehan.tb_sms_log
				
		WHERE	sms_log_id = #{log_id}::int	
		</if>
		<if test="log_type == null or log_type == '' or log_type == 'E-mail'">
		SELECT 
				'E-mail' as log_type
				, email_log_id as log_id
				, member_id
				, create_date
				, title
				, contents
				, type
		FROM	
				saehan.tb_email_log
				
		WHERE	email_log_id = #{log_id}::int
		</if>
	</select>

	<select id="selectSendingHistoryReceiver" parameterType="Map" resultType="Map">
		<if test="log_type == 'SMS'">
		SELECT 
				'SMS' as log_type
				, A.sms_log_id as log_id
				, B.member_id
				, CONCAT(' ', C.nm, '(', C.hp_no,')') as dsp_info
		FROM	
				saehan.tb_sms_log A JOIN saehan.tb_sms_log_rcv B on A.sms_log_id = B.sms_log_id
				JOIN saehan.tb_member C ON B.member_id = C.member_id
				
		WHERE	A.sms_log_id = #{log_id}::int	
		</if>
		<if test="log_type == 'E-mail'">
		SELECT 
				'E-mail' as log_type
				, A.email_log_id as log_id
				, B.member_id
				, CONCAT(' ', C.nm, '(', C.email,')') as dsp_info
		FROM	
				saehan.tb_email_log A JOIN saehan.tb_email_log_rcv B on A.email_log_id = B.email_log_id
				JOIN saehan.tb_member C ON B.member_id = C.member_id
				
		WHERE	A.email_log_id = #{log_id}::int
		</if>
	</select>
	
	<insert id="insertMember" parameterType="Map">
		<selectKey keyProperty="insertKey" resultType="int" order="AFTER">
			SELECT MAX(member_id) FROM saehan.tb_member
		</selectKey>
		INSERT INTO saehan.tb_member 
			(
				id
				, passwd
				, nm
				, hp_no
				, email
				, type
				, reg_dt
				, permit_yn
				, state
				, position_name
				, language_type
				, aply_class
				<if test="type == 1">
				, office_rent_id
				, company_name
				</if>
			)
			VALUES
			(
				#{id}
				, #{passwd}
				, #{nm}
				, #{hp_no}
				, #{email}
				, #{type}::int
				, now()
				, 'W'
				, 'S'
				, #{position_name}
				, #{language_type}
				<choose>
					<when test="type == 1">
					, 'G'
					</when>
					<otherwise>
					, 'O'
					</otherwise>
				</choose>
				<if test="type == 1">
				, #{office_rent_id}::int
				, #{company_name}
				</if>
			)
	</insert>
	
	<sql id="selectCompanyInfoSql">
	 	SELECT
	 			ROW_NUMBER() OVER (ORDER BY company_name) AS RNUM
				, office_rent_id
				, company_name
				, member_id
				, mgr_name
				, mgr_email
				, mgr_hp_no
				, meetingtype
				, CASE WHEN rep_office_name = NULL OR rep_office_name = '' THEN company_name ELSE CONCAT(company_name, ' / ', rep_office_name) END as company_desc
		FROM 	
				saehan.TB_OFFICE_RENT
		WHERE 	virtual_contract = 'N' AND type = 1 AND del_yn != 'Y'
				AND to_char(rent_end_dt::date, 'YYYY-MM-DD') <![CDATA[  >= ]]>   to_char(now(), 'YYYY-MM-DD')
				
				<if test="searchWord != null and searchWord != ''">
				AND company_name LIKE CONCAT('%', #{searchWord}, '%')
				</if>
	</sql>
	<select id="selectCompanyInfo" parameterType="Map" resultType="Map">
    	<include refid="selectCompanyInfoSql"/>
	</select>
	
	<select id="selectCompanyInfo2" parameterType="Map" resultType="Map">
    	SELECT
	 			ROW_NUMBER() OVER (ORDER BY company_name) AS RNUM
				, office_rent_id
				, company_name
				, member_id
				, mgr_name
				, mgr_email
				, mgr_hp_no
				, meetingtype
				, CASE WHEN rep_office_name = NULL OR rep_office_name = '' THEN company_name ELSE CONCAT(company_name, ' / ', rep_office_name) END as company_desc
		FROM 	
				saehan.TB_OFFICE_RENT
		WHERE 	virtual_contract = 'N' AND type = 1 AND del_yn != 'Y'
				AND to_char(rent_end_dt::date, 'YYYY-MM-DD') <![CDATA[  >= ]]>   to_char(now(), 'YYYY-MM-DD')
				
				<if test="searchWord != null and searchWord != ''">
				AND (company_name LIKE CONCAT('%', #{searchWord}, '%') or rep_office_name LIKE CONCAT('%',#{searchWord}, '%'))
				</if>
	</select>
	
	<insert id="insertSendingHistorySMS"  parameterType="com.anylogic.iot.api.admin.member.vo.SendMsgLogVO" useGeneratedKeys="true" keyProperty="log_id">
		INSERT INTO saehan.tb_sms_log (member_id, create_date, contents, type)
		VALUES
		(
		#{member_id}::int
		, now()
		, #{contents}
		, #{type}
		)
	</insert>

	<insert id="insertSendingHistorySmsReceiver"  parameterType="Map">
		INSERT INTO saehan.tb_sms_log_rcv (sms_log_id, member_id)
		VALUES
		<foreach collection="sendList" item="target" separator=",">
			(#{log_id}::int , #{target.member_id}::int)
		</foreach>
	</insert>

	<insert id="insertSendingHistoryEmail"  parameterType="com.anylogic.iot.api.admin.member.vo.SendMsgLogVO" useGeneratedKeys="true" keyProperty="log_id">
		INSERT INTO saehan.tb_email_log (member_id, create_date, title, contents, type)
		VALUES
		(
		#{member_id}::int
		, now()
		, #{title}
		, #{contents}
		, #{type}
		)
	</insert>

	<insert id="insertSendingHistoryEmailReceiver"  parameterType="Map">
		INSERT INTO saehan.tb_email_log_rcv (email_log_id, member_id)
		VALUES
		<foreach collection="sendList" item="target" separator=",">
			(#{log_id}::int , #{target.member_id}::int)
		</foreach>
	</insert>
	
	
	
	<insert id="setRegDevice" parameterType="Map">
		INSERT INTO
		saehan.tb_device(
		member_id,
		registration_date
		)values(
		#{insertKey}::int,		
		now()
		)
	</insert>
</mapper>




