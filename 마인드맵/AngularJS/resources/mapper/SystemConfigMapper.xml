<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper
	namespace="com.anylogic.iot.api.admin.systemConfig.mapper.SystemConfigMapper">


	<select id="getDefaultList" parameterType="Map" resultType="Map">
		select
		open_time,
		close_time
		from saehan.tb_op_time
		where type = #{type}
	</select>

	<delete id="deleteAccount" parameterType="Map">
		update
		saehan.tb_member
		set state = 'D'
		where member_id = cast(#{member_id} as
		numeric)
	</delete>
	<delete id="deleteEquipment" parameterType="Map">
		update
		saehan.tb_equip
		set del_yn = 'Y'
		where equip_id = cast(#{equip_id} as
		numeric)
	</delete>
	<delete id="deleteFacility" parameterType="Map">
		update
		saehan.tb_facility
		set del_yn = 'Y'
		where facility_id =
		cast(#{facility_id} as numeric)
	</delete>
	<delete id="deleteGoods" parameterType="Map">
		update
		saehan.tb_product
		set del_yn = 'Y'
		where product_id = cast(#{product_id}
		as numeric)
	</delete>
	<delete id="deleteMeetingRoom" parameterType="Map">
		update
		saehan.tb_conference
		set del_yn = 'Y'
		where conference_id =
		cast(#{conference_id} as numeric)
	</delete>
	<delete id="deleteOffice" parameterType="Map">
		update
		saehan.tb_office
		set del_yn = 'Y'
		where office_id = cast(#{office_id} as
		numeric)
	</delete>





<insert id="insertDevice" parameterType="Map">
		INSERT INTO
		saehan.tb_device(
		member_id,
		registration_date
		)values(
		#{insertKey}::int,		
		now()
		)
	</insert>



	<!-- 관리자계정정보 등록 -->
	<insert id="insertAccount" parameterType="Map">
	<selectKey keyProperty="insertKey" resultType="int" order="AFTER">
			SELECT MAX(member_id) FROM saehan.tb_member
		</selectKey>
		
		INSERT INTO
		saehan.tb_member(
		aply_class , nm
		, id
		, passwd , dept_nm
		, hp_no , email
		, office_rent_id , company_name
		, type , permit_yn
		, state , language_type
		, reg_dt
		)
		VALUES(
		#{aply_class} , #{nm}
		, #{id}
		, #{passwd} , #{dept_nm}
		, #{hp_no} , #{email}
		, (select office_rent_id from saehan.tb_office_rent where  company_name = 'COWORKERS') 
		, (select company_name from saehan.tb_office_rent where  company_name = 'COWORKERS') 
		, 1 , 'Y'
		, 'S' , 'K'
		, now()
		)
	</insert>
	<!-- 부대시설정보 등록 -->
	<insert id="insertEquipment" parameterType="Map">
		INSERT INTO
		saehan.tb_equip(
		equip_name , count
		, branch_id , place_flag
		, state , useflag
		, created_date , del_yn
		)
		VALUES(
		#{equip_name} , cast(#{count} as numeric)
		, #{branch_id}::int , #{place_flag}::int
		, #{state} , 'Y'
		, now() , 'N'
		)
	</insert>
	<!-- 편의시설정보 등록 -->
	<insert id="insertFacility" parameterType="Map">
		INSERT INTO
		saehan.tb_facility(
		branch_id , room_name
		, floor , type
		, basic_use_hour , basic_use_fee
		, acceptor_number , operation_open_time
		, operation_close_time , state
		, created_date , del_yn
		)
		VALUES(
		#{branch_id}::int , #{room_name}
		, #{floor}::int , #{type}
		, #{basic_use_hour}::int , #{basic_use_fee}::int
		, #{acceptor_number}::int , 
		
		<!-- 
		<if test="searchType != null and (searchType eq 'fitness'.toString()) ">
			and a.type = 'F'
		</if> -->
		<if test="type != null and (type eq 'F'.toString())">
		(select open_time from saehan.tb_op_time where type = 'F'),
		(select close_time from saehan.tb_op_time where type = 'F'),
		</if>
		
		<if test="type != null and (type eq 'S'.toString())">
		(select open_time from saehan.tb_op_time where type = 'S'),
		(select close_time from saehan.tb_op_time where type = 'S'),
		</if>
		
		 #{state}
		, now() , 'N'
		)
	</insert>

	<!-- 상품정보 등록 -->
	<insert id="insertGoods" parameterType="Map">
		INSERT INTO
		saehan.tb_product(
		type , buying_time
		, product_price , activate
		, create_id , created_date
		, del_yn
		)
		VALUES(
		#{type} , #{buying_time}::int
		, cast(#{product_price} as numeric) , #{activate}
		, #{create_id} , now()
		, 'N'
		)
	</insert>
	<!-- 회의실정보 등록 -->
	<insert id="insertMeetingRoom" parameterType="Map">
		insert into
		saehan.tb_conference
		(
		branch_id , room_name
		, floor , room_size
		, room_area , basic_hour
		, basic_fee , 
		start_time
		, end_time , state
		, created_date
		, del_yn , descri
		, room_no
		, fixed_equip
		, hour_fee
		, halfday_fee
		)
		VALUES
		(
		#{branch_id}::int, #{room_name},
		#{floor}::int, #{room_size}::int,
		(cast(#{room_area} as numeric)), #{basic_hour}::int,
		(cast(#{basic_fee} as numeric)), 
		(select open_time from saehan.tb_op_time where type = 'C'),
		(select close_time from saehan.tb_op_time where type = 'C'),		
		#{state},
		now(),
		'N', #{descri}::text,
		#{room_no}
		, #{fixed_equip}
		, #{hour_fee}::int
		, #{halfday_fee}::int
		)
	</insert>
	<!-- 사무실정보 등록 -->
	<insert id="insertOffice" parameterType="Map">
		insert into
		saehan.tb_office
		(
		branch_id , office_name
		, floor , mem_cnt
		, room_price , created_date
		, residence_flag , state
		, del_yn
		)
		VALUES
		(
		#{branch_id}::int, #{office_name},
		#{floor}::int, #{mem_cnt}::int,
		(cast(#{room_price} as numeric)), now(),
		'N',  #{state},
		'N'
		)
	</insert>





	<!-- 테이블업데이트 변경 -->
	<update id="updateAccount" parameterType="Map">
		update saehan.tb_member
		set
		passwd = #{passwd},
		dept_nm = #{dept_nm},
		hp_no = #{hp_no},
		email = #{email},
		state = #{state}
		where member_id = #{member_id}::int
	</update>
	<update id="updateEquipment" parameterType="Map">
		update saehan.tb_equip
		set
		<!-- equip_name = #{equip_name}, -->
		count = #{count}::int,
		place_flag = #{place_flag}::int,
		useflag = #{useflag},
		state = #{state}
		where equip_id = #{equip_id}::int
	</update>
	<update id="updateFacility" parameterType="Map">
		update saehan.tb_facility
		set
		<!-- branch_id = #{branch_id}::int, room_name = #{room_name}, floor = #{floor}, -->
		type = #{type},
		basic_use_hour = #{basic_use_hour}::int,
		acceptor_number = #{acceptor_number}::int,
		operation_open_time = #{operation_open_time}::time,
		operation_close_time = #{operation_close_time}::time,
		room_name = #{room_name},
		state = #{state}
		where facility_id = #{facility_id}::int
	</update>
	<update id="updateGoods" parameterType="Map">
		update saehan.tb_product
		set
		<!-- type = #{type}, buying_time = #{buying_time}::int, -->
		product_price = #{product_price}::int,
		activate = #{activate},
		update_id = #{update_id}::int,
		update_date = now()
		where product_id = #{product_id}::int
	</update>
	<update id="updateMeetingRoom" parameterType="Map">
		update saehan.tb_conference
		set
		<!-- room_no = #{room_no}, branch_id = #{branch_id}::int, floor = #{floor}::int, -->
		room_name = #{room_name},
		room_size = #{room_size}::int,
		room_area = #{room_area}::int,
		basic_hour = #{basic_hour}::int,
		basic_fee = #{basic_fee}::int,
		hour_fee = #{hour_fee}::int,
		halfday_fee = #{halfday_fee}::int,
		start_time = #{start_time}::time,
		end_time = #{end_time}::time,
		state = #{state},
		fixed_equip = #{fixed_equip},
		descri = #{descri}::text,
		update_date = now()
		where conference_id = #{conference_id}::int
	</update>
	<update id="updateOffice" parameterType="Map">
		update saehan.tb_office
		set
		<!-- branch_id = #{branch_id}::int, office_name = #{office_name}, -->
		mem_cnt = #{mem_cnt}::int,
		room_price = #{room_price}::int,
		update_date = #{update_date}::date,
		state = #{state}
		where office_id = #{office_id}::int
	</update>







	<!-- 편의시설 시간정보 변경 -->
	<update id="insertUpdateOpTime" parameterType="Map">
		INSERT INTO saehan.tb_op_time
		(type, open_time, close_time, update_date)
		VALUES (#{type},
		#{operation_open_time}::time, #{operation_close_time}::time, now())
		ON CONFLICT (type)
		DO UPDATE SET
		type =#{type},
		open_time = #{operation_open_time}::time,
		close_time = #{operation_close_time}::time,
		update_date = now()
	</update>
	<update id="updateTimeFacility" parameterType="Map">
		update
		saehan.tb_facility
		set
		operation_open_time = #{operation_open_time}::time,
		operation_close_time = #{operation_close_time}::time
		where type = #{type}
	</update>
	<!-- 회의실 시간정보 변경 -->
	<update id="updateTimeMeetingRoom" parameterType="Map">
		update
		saehan.tb_conference
		set
		start_time = #{operation_open_time}::time,
		end_time = #{operation_close_time}::time
	</update>





	<select id="idCheck" parameterType="Map" resultType="Map">
		select
		member_id
		from saehan.tb_member
		where id = #{id}
		and state not in ('O', 'D')
	</select>
	
	
	<select id="getBranchList" parameterType="Map" resultType="Map">
		select
		branch_id,
		branch_name
		from saehan.tb_branch
	</select>
	<select id="getOpTimeList" parameterType="Map" resultType="Map">
		select
		type,
		open_time,
		close_time
		from saehan.tb_op_time
	</select>




	<!-- 관리자계정정보 조회 -->
	<select id="getAccountList" parameterType="Map" resultType="Map">
		<!-- 페이징 SQL Header -->
		<include
			refid="com.anylogic.iot.api.common.mapper.CommonMapper.pagingHeaderSql" />
		SELECT
		a.member_id,
		a.nm,
		a.id,
		a.passwd,
		a.dept_nm,
		a.hp_no,
		a.reg_dt,
		a.state,
		a.email,
		aply_class
		, ROW_NUMBER() OVER( ORDER BY member_id asc
		) as RNUM
		FROM saehan.tb_member a
		where a.state not in ('D') and aply_class in ('SA',
		'SU', 'AU', 'AD')
		<if
			test="searchType != null and (searchType eq 'name'.toString()) and searchText != null and searchText">
			and a.nm like CONCAT('%', #{searchText}, '%')
		</if>
		<if
			test="searchType != null and (searchType eq 'phone'.toString()) and searchText != null and searchText">
			and ( a.tel_no like CONCAT('%', #{searchText}, '%') or a.hp_no like
			CONCAT('%', #{searchText}, '%') )
		</if>
		<!-- 페이징 SQL Footer -->
		<include
			refid="com.anylogic.iot.api.common.mapper.CommonMapper.pagingFooterSql" />
	</select>


	<!-- 부대시설정보 조회 -->
	<select id="getEquipmentList" parameterType="Map" resultType="Map">
		<!-- 페이징 SQL Header -->
		<include
			refid="com.anylogic.iot.api.common.mapper.CommonMapper.pagingHeaderSql" />
		SELECT
		a.equip_name,
		a.count,
		a.place_flag,
		a.useflag,
		a.created_date,
		a.update_date,
		a.state,
		(select branch_name from saehan.tb_branch where a.branch_id = branch_id) as branch_name
		, ROW_NUMBER() OVER( ORDER BY equip_id asc ) as
		RNUM
		FROM saehan.tb_equip a
		where 1=1 and a.del_yn in ('N', 'n')
		<if
			test="searchType != null and (searchType eq 'name'.toString()) and searchText != null and searchText">
			and a.equip_name like CONCAT('%', #{searchText}, '%')
		</if>
		<!-- 페이징 SQL Footer -->
		<include
			refid="com.anylogic.iot.api.common.mapper.CommonMapper.pagingFooterSql" />
	</select>


	<!-- 편의시설정보 조회 -->
	<select id="getFacilityList" parameterType="Map" resultType="Map">
		<!-- 페이징 SQL Header -->
		<include
			refid="com.anylogic.iot.api.common.mapper.CommonMapper.pagingHeaderSql" />

		SELECT
		a.facility_id,
		b.branch_id,
		b.branch_name,
		a.type,
		a.room_name,
		a.floor,
		a.acceptor_number,
		a.basic_use_hour,
		a.basic_use_fee,
		a.operation_open_time,
		a.operation_close_time,
		a.state,
		a.created_date,
		a.del_yn
		, ROW_NUMBER() OVER(
		ORDER BY facility_id asc ) as RNUM
		FROM
		saehan.tb_facility a, saehan.tb_branch b
		where a.branch_id =b.branch_id
		and a.del_yn in ('N', 'n')
		<if test="searchType != null and (searchType eq 'fitness'.toString()) ">
			and a.type = 'F'
		</if>
		<if test="searchType != null and (searchType eq 'sleep'.toString()) ">
			and a.type = 'S'
		</if>
		<if
			test="searchType != null and (searchType eq 'branch'.toString()) and searchText != null and searchText">
			and b.branch_name like CONCAT('%', #{searchText}, '%')
		</if>

		<!-- 페이징 SQL Footer -->
		<include
			refid="com.anylogic.iot.api.common.mapper.CommonMapper.pagingFooterSql" />
	</select>




	<!-- 상품정보 조회 -->
	<select id="getGoodsList" parameterType="Map" resultType="Map">
		<!-- 페이징 SQL Header -->
		<include
			refid="com.anylogic.iot.api.common.mapper.CommonMapper.pagingHeaderSql" />

		SELECT
		a.product_id,
		a.type,
		a.buying_time,
		a.product_price,
		a.activate,
		a.created_date,
		a.update_date,
		a.create_id,
		c.nm as create_nm,
		a.update_id,
		d.nm as update_nm,
		a.del_yn
		, ROW_NUMBER() OVER( ORDER BY a.type, a.buying_time ) as RNUM
		FROM
		saehan.tb_product a LEFT JOIN saehan.tb_member c
		ON a.create_id = c.member_id
		LEFT JOIN saehan.tb_member d
		ON a.update_id = d.member_id
		where a.del_yn in ('N', 'n')
		<if test="searchType != null and (searchType eq 'all'.toString()) and searchText != null  ">
			and a.buying_time = #{searchText}::int
		</if>
		<if test="searchType != null and (searchType eq 'smart'.toString()) and searchText != null  ">
			and a.type = 'D' and a.buying_time = #{searchText}::int
		</if>
		<if test="searchType != null and (searchType eq 'smart'.toString()) ">
			and a.type = 'D' 
		</if>
		<if test="searchType != null and (searchType eq 'service'.toString()) and searchText != null   ">
			and a.type = 'S' and a.buying_time = #{searchText}::int
		</if>
		<if test="searchType != null and (searchType eq 'service'.toString())  ">
			and a.type = 'S'
		</if>
		<if test="searchType == null and searchText != null ">
			and a.buying_time = #{searchText}::int
		</if>

		<!-- 페이징 SQL Footer -->
		<include
			refid="com.anylogic.iot.api.common.mapper.CommonMapper.pagingFooterSql" />
	</select>



	<!-- 회의실정보 조회 -->
	<select id="getMeetingRoomList" parameterType="Map" resultType="Map">
		<!-- 페이징 SQL Header -->
		<include
			refid="com.anylogic.iot.api.common.mapper.CommonMapper.pagingHeaderSql" />

		SELECT
		a.conference_id,
		a.branch_id,
		b.branch_name,
		a.room_name,
		a.room_no,
		a.floor,
		a.room_size,
		a.room_area,
		a.basic_hour,
		a.basic_fee,
		a.start_time,
		a.end_time,
		a.state,
		a.fixed_equip,
		a.created_date,
		a.update_date,
		a.descri,
		a.del_yn,
		a.hour_fee,
		a.halfday_fee,
		ROW_NUMBER() OVER( ORDER BY conference_id asc ) as RNUM
		FROM
		saehan.tb_conference a LEFT JOIN saehan.tb_branch b
		ON a.branch_id
		=b.branch_id
		WHERE a.del_yn in ('N', 'n')
		<!-- <if
			test="searchType != null and (searchType eq 'branch'.toString()) and searchText != null and searchText">
			and b.branch_name like 'CONCAT('%', #{searchText}, '%')
		</if> -->
		<if
			test="searchType != null and (searchType eq 'branch'.toString()) and searchText != null and searchText">
			and b.branch_name like CONCAT('%', #{searchText}, '%')
		</if>
		<if
			test="searchType != null and (searchType eq 'name'.toString()) and searchText != null and searchText">
			and a.room_name like CONCAT('%', #{searchText}, '%')
		</if>
		<if
			test="searchType != null and (searchType eq 'floor'.toString()) and searchText != null and searchText">
			and a.floor like CONCAT('%', #{searchText}, '%')
		</if>
		<!-- 페이징 SQL Footer -->
		<include
			refid="com.anylogic.iot.api.common.mapper.CommonMapper.pagingFooterSql" />
	</select>




	<!-- 사무실정보 조회 -->
	<select id="getOfficeList" parameterType="Map" resultType="Map">
		<!-- 페이징 SQL Header -->
		<include
			refid="com.anylogic.iot.api.common.mapper.CommonMapper.pagingHeaderSql" />

		SELECT
			a.office_id,
			a.branch_id,
			b.branch_name,
			a.office_name,
			a.floor,
			a.mem_cnt,
			a.room_price,
			a.created_date,
			a.update_date,
			a.residence_flag,
			a.state,
			a.del_yn
			, ROW_NUMBER() OVER( order by b.branch_name, a.office_name ) as RNUM
		FROM 	saehan.tb_office a LEFT JOIN saehan.tb_branch b
		ON a.branch_id	= b.branch_id
		WHERE a.del_yn in ('N', 'n')
		<if
			test="searchType != null and (searchType eq 'branch'.toString()) and searchText != null and searchText">
			and b.branch_name like CONCAT('%', #{searchText}, '%')
		</if>
		<if
			test="searchType != null and (searchType eq 'name'.toString()) and searchText != null and searchText">
			and a.office_name like CONCAT('%', #{searchText}, '%')
		</if>
		<if test="searchType != null and (searchType eq 'fullFlag'.toString()) and searchText != null and (searchText and searchText eq '입주'.toString()) ">
			and a.residence_flag = 'Y'
		</if>
		<if test="searchType != null and (searchType eq 'fullFlag'.toString()) and searchText != null and (searchText and searchText eq '공실'.toString()) ">
			and a.residence_flag = 'N'
		</if>		
		<if test="searchType != null and (searchType eq 'state'.toString())  and searchText != null and (searchText and searchText eq '정상'.toString()) ">
			and a.state = 'Y'
		</if>
		<if test="searchType != null and (searchType eq 'state'.toString())  and searchText != null and (searchText and searchText eq '수리중'.toString()) ">
			and a.state = 'R'
		</if>
		order by b.branch_name, a.office_name
		<!-- 페이징 SQL Footer -->
		<include
			refid="com.anylogic.iot.api.common.mapper.CommonMapper.pagingFooterSql" />
	</select>






</mapper>


  

