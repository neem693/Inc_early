<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.anylogic.iot.api.admin.calc.mapper.CalcMapper">
			
			
			
			
	<select id="getDailyCalYearListExcel" parameterType="Map" resultType="com.anylogic.iot.api.admin.calc.vo.DailyCalYearVO">
		select
			to_char(applydate,'YYYY-MM') as applydate,
			
			 sum(room_taxbill_auto + room_taxbill_manual + room_payment + room_card + room_pg) as room_total, 
			 
       		 sum(meeting_taxbill_auto + meeting_taxbill_manual +meeting_payment + meeting_card +  meeting_pg) as meeting_total, 
       		 
       		 sum(inci_payment + inci_card + inci_vanding + inci_pg) as inci_total, 
       		
       		 sum(room_taxbill_auto + room_taxbill_manual + 
       room_payment + room_card + room_pg + meeting_taxbill_auto + meeting_taxbill_manual + 
       meeting_payment + meeting_card + meeting_pg + inci_payment + inci_card + 
       inci_vanding + inci_pg ) as subtotal
       		
		from saehan.tb_dailycal
		where to_char(applydate,'YYYY') = #{date}
		group by to_char(applydate,'YYYY-MM')
		order by applydate
	</select>
	
	<select id="getDailyCalYearList" parameterType="Map" resultType="Map">
		select
			to_char(applydate,'YYYY-MM') as applydate,
			
			 sum(room_taxbill_auto + room_taxbill_manual + room_payment + room_card + room_pg) as room_total, 
			 
       		 sum(meeting_taxbill_auto + meeting_taxbill_manual +meeting_payment + meeting_card +  meeting_pg) as meeting_total, 
       		 
       		 sum(inci_payment + inci_card + inci_vanding + inci_pg) as inci_total, 
       		
       		 sum(room_taxbill_auto + room_taxbill_manual + 
       room_payment + room_card + room_pg + meeting_taxbill_auto + meeting_taxbill_manual + 
       meeting_payment + meeting_card + meeting_pg + inci_payment + inci_card + 
       inci_vanding + inci_pg ) as subtotal
       		
		from saehan.tb_dailycal
		where to_char(applydate,'YYYY') = #{date}
		group by to_char(applydate,'YYYY-MM')
		order by applydate
	</select>
	
<update id="updateDailyCalData" parameterType="Map">
	UPDATE saehan.tb_dailycal
	   SET deposit =  #{deposit}::int
	     , room_taxbill_auto = #{room_taxbill_auto}::int
	     , room_taxbill_manual = #{room_taxbill_manual}::int
	     , room_payment = #{room_payment}::int
	     , room_card = #{room_card}::int
	     , room_pg = #{room_pg}::int
	     , meeting_taxbill_auto = #{meeting_taxbill_auto}::int
	     , meeting_taxbill_manual = #{meeting_taxbill_manual}::int
	     , meeting_payment = #{meeting_payment}::int
	     , meeting_card = #{meeting_card}::int
	     , meeting_pg = #{meeting_pg}::int
	     , inci_payment = #{inci_payment}::int
	     , inci_card = #{inci_card}::int
	     , inci_vanding = #{inci_vanding}::int
	     , inci_pg = #{inci_pg}::int
	     , remark = #{remark}
	     , createdate = now()
	    
     WHERE daily_cal_id = #{daily_cal_id}::int
	</update>	
	
<select id="getRoomTaxbillAuto" parameterType="Map" resultType="Map">
	select 
		amount 
	from saehan.tb_invoice 
	where office_rent_id = #{office_rent_id}::int
	and  deposit_status = 'Y'
	and to_char(create_dt, 'YYYY-MM-DD') = to_char(now(), 'YYYY-MM-DD')
	and booking_id is null

</select>

<select id="getMeetingTaxbillAuto" parameterType="Map" resultType="Map">
	select 
		amount 
	from saehan.tb_invoice 
	where office_rent_id = #{office_rent_id}::int
	and  deposit_status = 'Y'
	and to_char(create_dt, 'YYYY-MM-DD') = to_char(now(), 'YYYY-MM-DD')
	and booking_id is not null

</select>

	<insert id="saveDailyCalData" parameterType="Map">
		insert into saehan.tb_dailycal
		(
			office_rent_id,
			deposit,
			room_taxbill_auto,
			room_taxbill_manual,
			room_payment,
			room_card, room_pg,
			meeting_taxbill_auto,
			meeting_taxbill_manual,
			meeting_payment,
			meeting_card,
			meeting_pg,
			inci_payment,
			inci_card,
			inci_vanding,
			inci_pg,
			remark,
			applydate,
			createdate
		)values
		(
			#{office_rent_id}::int,
			#{deposit}::int,
			#{room_taxbill_auto}::int,
			#{room_taxbill_manual}::int,
			#{room_payment}::int,
			#{room_card}::int,
			#{room_pg}::int,
			#{meeting_taxbill_auto}::int,
			#{meeting_taxbill_manual}::int,
			#{meeting_payment}::int,
			#{meeting_card}::int,
			#{meeting_pg}::int,
			#{inci_payment}::int,
			#{inci_card}::int,
			#{inci_vanding}::int,
			#{inci_pg}::int,
			#{remark},
			#{applydate}::timestamp,
			now()
		
		)
	</insert>
	<select id="getDailyCalDayList" parameterType="Map" resultType="Map">
		select
			(select company_name from saehan.tb_office_rent where office_rent_id = a.office_rent_id ) as company_name,
			a.daily_cal_id, 
			a.office_rent_id, 
			a.deposit, 
			a.room_taxbill_auto, 
			a.room_taxbill_manual,
			a.room_payment, 
			a.room_card, 
			a.room_pg, 
			a.meeting_taxbill_auto,
			a.meeting_taxbill_manual,
			a.meeting_payment, 
			a.meeting_card, 
			a.meeting_pg, 
			a.inci_payment, 
			a.inci_card,
			a.inci_vanding, 
			a.inci_pg, 
			a.remark, 
			a.applydate, 
			a.createdate,
			(a.deposit + a.room_taxbill_auto + a.room_taxbill_manual + 
       a.room_payment + a.room_card + a.room_pg + a.meeting_taxbill_auto + a.meeting_taxbill_manual + 
       a.meeting_payment + a.meeting_card + a.meeting_pg + a.inci_payment + a.inci_card + 
       a.inci_vanding + a.inci_pg) as subtotal
		from saehan.tb_dailycal a
		where to_char(applydate,'YYYY-MM-DD') = #{date}
		order by applydate
	</select>

<select id="getDailyCalDayListExcel" parameterType="Map" resultType="com.anylogic.iot.api.admin.calc.vo.DailyCalMonthVO">
		select
			(select company_name from saehan.tb_office_rent where office_rent_id = a.office_rent_id ) as company_name,
			a.daily_cal_id, 
			a.office_rent_id, 
			a.deposit, 
			a.room_taxbill_auto, 
			a.room_taxbill_manual,
			a.room_payment, 
			a.room_card, 
			a.room_pg, 
			a.meeting_taxbill_auto,
			a.meeting_taxbill_manual,
			a.meeting_payment, 
			a.meeting_card, 
			a.meeting_pg, 
			a.inci_payment, 
			a.inci_card,
			a.inci_vanding, 
			a.inci_pg, 
			a.remark, 
			a.applydate, 
			a.createdate,
			(a.deposit + a.room_taxbill_auto + a.room_taxbill_manual + 
       a.room_payment + a.room_card + a.room_pg + a.meeting_taxbill_auto + a.meeting_taxbill_manual + 
       a.meeting_payment + a.meeting_card + a.meeting_pg + a.inci_payment + a.inci_card + 
       a.inci_vanding + a.inci_pg) as subtotal
		from saehan.tb_dailycal a
		where to_char(applydate,'YYYY-MM-DD') = #{date}
		order by applydate
	</select>
	
	<select id="getDailyCalMonthListExcel" parameterType="Map" resultType="com.anylogic.iot.api.admin.calc.vo.DailyCalMonthVO">
		select
			applydate::date,
			 sum(deposit) as deposit, 
			 sum(room_taxbill_auto) as room_taxbill_auto, 
			 sum(room_taxbill_manual) as room_taxbill_manual, 
       		 sum(room_payment) as room_payment, 
       		 sum(room_card) as room_card, 
       		 sum(room_pg) as room_pg, 
       		 sum(meeting_taxbill_auto) as meeting_taxbill_auto, 
       		 sum(meeting_taxbill_manual) as meeting_taxbill_manual, 
       		 sum(meeting_payment) as meeting_payment, 
       		 sum(meeting_card) as meeting_card, 
       		 sum(meeting_pg) as meeting_pg, 
       		 sum(inci_payment) as inci_payment, 
       		 sum(inci_card) as inci_card, 
       		 sum(inci_vanding) as inci_vanding, 
       		 sum(inci_pg) as inci_pg,
       		 sum(deposit + room_taxbill_auto + room_taxbill_manual + 
       room_payment + room_card + room_pg + meeting_taxbill_auto + meeting_taxbill_manual + 
       meeting_payment + meeting_card + meeting_pg + inci_payment + inci_card + 
       inci_vanding + inci_pg) as subtotal
       		
		from saehan.tb_dailycal
		where to_char(applydate,'YYYY-MM') = #{date}
		group by applydate::date 
		order by applydate
	</select>
	
	
	<select id="getDailyCalMonthList" parameterType="Map" resultType="Map">
		select
			applydate::date,
			 sum(deposit) as deposit, 
			 sum(room_taxbill_auto) as room_taxbill_auto, 
			 sum(room_taxbill_manual) as room_taxbill_manual, 
       		 sum(room_payment) as room_payment, 
       		 sum(room_card) as room_card, 
       		 sum(room_pg) as room_pg, 
       		 sum(meeting_taxbill_auto) as meeting_taxbill_auto, 
       		 sum(meeting_taxbill_manual) as meeting_taxbill_manual, 
       		 sum(meeting_payment) as meeting_payment, 
       		 sum(meeting_card) as meeting_card, 
       		 sum(meeting_pg) as meeting_pg, 
       		 sum(inci_payment) as inci_payment, 
       		 sum(inci_card) as inci_card, 
       		 sum(inci_vanding) as inci_vanding, 
       		 sum(inci_pg) as inci_pg,
       		 sum(deposit + room_taxbill_auto + room_taxbill_manual + 
       room_payment + room_card + room_pg + meeting_taxbill_auto + meeting_taxbill_manual + 
       meeting_payment + meeting_card + meeting_pg + inci_payment + inci_card + 
       inci_vanding + inci_pg) as subtotal
       		
		from saehan.tb_dailycal
		where to_char(applydate,'YYYY-MM') = #{date}
		group by applydate::date 
		order by applydate
	</select>


	<select id="showInfoTaxInvoice" parameterType="Map" resultType="Map">
		select
		*
		from saehan.tb_contract
		where office_rent_id = #{office_rent_id}::int
	</select>

<select id="getEstimateBookingInfo" parameterType="Map" resultType="Map">
	
		select 
			*
		from saehan.tb_estimate a
		where a.estimate_id = #{id}::int
		
	</select>
	
	
<select id="getIncidental" parameterType="Map" resultType="Map">
	select  
		a.estimate_comcd_use_id
		, a.estimate_id
		, a.comcd_id
		, a.amount
		, a.count
		, a.remarks
		, (a.amount::int * a.count::int ) as totalAmount
		, to_char(a.create_dt,'YYYY-MM-DD hh24:mi:ss') as create_dt
		, to_char(a.update_dt,'YYYY-MM-DD hh24:mi:ss') as update_dt
		, (select comcd_major_nm from saehan.tb_comcode where comcd_id = a.comcd_id) as comcd_major_nm
		, (select comcd_minor_nm from saehan.tb_comcode where comcd_id = a.comcd_id) as comcd_minor_nm
		, a.vat_flag
	from saehan.tb_estimate_comcd_use a
	where a.estimate_id = #{id}::int

</select>


<insert id="setIncidentel" parameterType="Map">
insert into saehan.tb_estimate_comcd_use
( 
estimate_id
, comcd_id
, amount
, count
, remarks
, create_dt
, update_dt
, member_id
)values
(
#{insertKey}::int
, #{comcd_id}::int
, #{amount}::int
, #{count}::int
, #{remarks}
, now()
, now()
, #{member_id}::int
)


</insert>


<update id="resetIncidentalList" parameterType="Map">
DELETE FROM saehan.tb_estimate_comcd_use
     WHERE estimate_id = cast(#{estimate_id} as numeric)
</update>

<update id="updateEstimate" parameterType="Map">
	UPDATE saehan.tb_estimate
	   SET setup_type =  #{setup_type}::int
	     , room_rental_fee = #{room_rental_fee}::int
	     , room_rental_sub_fee = #{room_rental_sub_fee}::int
	     , remarks = #{remarks}
	     , estimate_fee = #{estimate_fee}::int
	     , estimate_nm = #{estimate_nm}
	     , meetingmembercnt = #{meetingmembercnt}::int
	     , estiamte_dt =to_timestamp(#{estiamte_dt}, 'YYYY-MM-DD hh24:mi:ss')
	     , estimate_sttime = #{estimate_sttime}
	     , estimate_entime = #{estimate_entime}
	     , create_dt = now()      
		 , client_name = #{client_name}
 		 , client_email = #{client_email}
  		 , client_phone = #{client_phone}
  		 , remarks2 = #{remarks2}
  		 , remarks3 = #{remarks3}
  
     WHERE estimate_id = #{estimate_id}::int
	</update>	

<insert id="setEstimate" parameterType="Map">
	<selectKey keyProperty="insertKey" resultType="int" order="AFTER">
		SELECT MAX(estimate_id) FROM saehan.tb_estimate
	</selectKey>
	insert into saehan.tb_estimate
		(
		office_rent_id
		, booking_conference_id
		, setup_type
		, room_rental_fee
		, room_rental_sub_fee
		, remarks
		, create_dt
		, update_dt
		, member_id
		, update_member_id
		, estimate_fee
		, conference_id
		, estimate_type
		, meetingmembercnt
		, estimate_nm 
  		, estiamte_dt
  		, estimate_sttime
  		, estimate_entime
  		, branch_id
  		, client_name
  		, client_email
  		, client_phone
  		, remarks2
  		, remarks3
		)values
		(
		#{office_rent_id}::int
		, #{booking_conference_id}::int
		, #{setup_type}::int
		, #{room_rental_fee}::int
		, #{room_rental_sub_fee}::int
		, #{remarks}
		, now()
		, now()
		, #{member_id}::int
		, #{update_member_id}::int
		, #{estimate_fee}::int
		, #{conference_id}::int
		, #{estimate_type}
		, #{meetingmembercnt}::int
		, #{estimate_nm}
  		, to_timestamp(#{estiamte_dt}, 'YYYY-MM-DD hh24:mi:ss')
  		, #{estimate_sttime}
  		, #{estimate_entime}
  		, #{branch_id}
  		, #{client_name}
  		, #{client_email}
  		, #{client_phone}
  		, #{remarks2}
  		, #{remarks3}
		)
</insert>

<select id="getBookingInfo" parameterType="Map" resultType="Map">
	
		select 
			a.booking_conference_id
			, a.conference_id
			, a.meeting_start_time
			, a.meeting_end_time
			, a.meeting_title
			, a.meeting_contents
			, a.meeting_status
			, a.company_name
			, a.remark
			, a.member_id
			, a.created_date
			, a.work_type
			, a.price
			, a.use_time
			, a.type
			, a.remarks
			, (select count(*) from saehan.tb_booking_participant where booking_conference_id = a.booking_conference_id) as memberCnt
			, (select client_name from saehan.tb_estimate where booking_conference_id = a.booking_conference_id limit 1) as client_name
			, (select client_email from saehan.tb_estimate where booking_conference_id = a.booking_conference_id limit 1) as client_email
			, (select client_phone from saehan.tb_estimate where booking_conference_id = a.booking_conference_id limit 1) as client_phone
			, (select setup_type from saehan.tb_estimate where booking_conference_id = a.booking_conference_id limit 1) as setup_type
		from saehan.tb_booking_conference a
		where a.booking_conference_id = #{id}::int
		
	</select>
	
<select id="getConferenceId" parameterType="Map" resultType="String">
	
		select 
			conference_id
		from saehan.tb_booking_conference
		where booking_conference_id = #{id}::int
		
	</select>
	
	
<select id="getConferenceInfo" parameterType="Map" resultType="map">
	
		select 
			(select branch_name from saehan.tb_branch where branch_id = 
				(select branch_id from saehan.tb_conference where conference_id = #{conferenceId}::int)
			) as branch_name
			, conference_id
			, room_name
			, room_area
			, basic_fee
			, hour_fee
			, halfday_fee
		from saehan.tb_conference
		where conference_id = #{conferenceId}::int
		
	</select>
	
<select id="getPgData" parameterType="Map" resultType="map">
	
		select 
			sum(approval_amount) as approval_amount
			, to_char(aproval_time, 'YYYY-MM') as aproval_date 
		from saehan.tb_approval 
		where to_char(aproval_time, 'YYYY-MM') = #{issue_month}
		group by aproval_date order by aproval_date desc
		
	</select>
	
	<delete id="deletePayData" parameterType="Map">
		delete from saehan.tb_approval
		where approval_id = #{approval_id}::int
	
	</delete>

<select id="getPayList" parameterType="Map" resultType="map">
	
		select 
			(select company_name from saehan.tb_member where member_id = a.member_id) as company_name,
			(select nm from saehan.tb_member where member_id = a.member_id) as nm,
			a.approval_title,
			a.approval_amount,
			a.card_company_nm,
			to_char(aproval_time, 'YYYY-MM-DD HH24:MI:SS') as aproval_time,
			a.approval_id as approval_id
		from saehan.tb_approval a
		where to_char(aproval_time, 'YYYY-MM-DD') = #{day}
		order by aproval_time desc
	</select>
	
<select id="getPgListExcel" parameterType="Map" resultType="com.anylogic.iot.api.admin.calc.vo.PGUseVO">
	
		select 
			sum(approval_amount) as approval_amount
			, to_char(aproval_time, 'YYYY-MM-DD') as aproval_date 
		from saehan.tb_approval 
		where to_char(aproval_time, 'YYYY-MM') = #{month}
		group by aproval_date order by aproval_date desc
		
	</select>
	

<select id="getPgList" parameterType="Map" resultType="map">
	
		select 
			sum(approval_amount) as approval_amount
			, to_char(aproval_time, 'YYYY-MM-DD') as aproval_date 
		from saehan.tb_approval 
		where to_char(aproval_time, 'YYYY-MM') = #{month}
		group by aproval_date order by aproval_date desc
		
	</select>
	
	
	
	<select id="getOfficeRentInfo2" parameterType="Map" resultType="map">
	
		select
			*
		from saehan.tb_office_rent 
		where office_rent_id = #{id}::int
		
	</select>
	
<select id="getOfficeRentInfo" parameterType="Map" resultType="map">
	
		select
			*
		from saehan.tb_office_rent 
		where office_rent_id = (
				select office_rent_id from saehan.tb_member where member_id = 
					(select member_id from saehan.tb_booking_conference where booking_conference_id = #{id}::int )				
				) 
		
	</select>
	
<select id="setBranch" parameterType="Map" resultType="map">
	
		select
			*
		from saehan.tb_conference 
		where   branch_id = #{branch_id}::int
		and del_yn = 'N'
		
	</select>

<select id="getEstimateListExcel_simple" parameterType="Map" resultType="com.anylogic.iot.api.admin.calc.vo.EstimateInfoVO">
	
		select
			a.branch_name
			, d.room_name
			, (select company_name from saehan.tb_office_rent where office_rent_id = c.office_rent_id ) as company_nm
			 , c.estimate_fee 
			 , c.client_name
			, c.client_email
			, c.client_phone
			, to_char(c.send_dt, 'YYYY-MM-DD HH24:MI:SS') as send_dt
			, ROW_NUMBER() OVER(ORDER BY c.create_dt desc) as RNUM
		from saehan.tb_branch a, saehan.tb_estimate c, saehan.tb_conference d
		where   a.branch_id = d.branch_id
		and d.conference_id = c.conference_id
		<if test="estimate_type != null and estimate_type !=''">
		  and c.estimate_type =#{estimate_type}
		</if>
		<!-- and b.booking_conference_id = c.booking_conference_id -->
		<if test="conference_nm != null and conference_nm !=''">
		  and d.room_name like CONCAT('%', #{conference_nm}, '%')
		</if>
		<if test="company_name != null and company_name !=''">
		  and b.company_name like CONCAT('%', #{company_name}, '%')
		</if>
		<if test="branch_nm != null and branch_nm !=''">
		  and a.branch_name like CONCAT('%', #{branch_nm}, '%')
		</if>
		
	</select>
	
	<select id="getEstimateList_simple" parameterType="Map" resultType="Map">
	<include refid="com.anylogic.iot.api.common.mapper.CommonMapper.pagingHeaderSql" />
		select
			a.branch_name
			, d.room_name
			, (select company_name from saehan.tb_office_rent where office_rent_id = c.office_rent_id ) as company_nm
			 , c.estimate_fee 
			 , c.estimate_id
			, c.office_rent_id
			, c.booking_conference_id
			, c.conference_id
			, c.client_name
			, c.client_email
			, c.client_phone
			, to_char(c.send_dt, 'YYYY-MM-DD HH24:MI:SS') as send_dt
			, ROW_NUMBER() OVER(ORDER BY c.create_dt desc) as RNUM
		from saehan.tb_branch a, saehan.tb_estimate c, saehan.tb_conference d
		where   a.branch_id = d.branch_id
		and d.conference_id = c.conference_id
		<if test="estimate_type != null and estimate_type !=''">
		  and c.estimate_type =#{estimate_type}
		</if>
		<!-- and b.booking_conference_id = c.booking_conference_id -->
		<if test="conference_nm != null and conference_nm !=''">
		  and d.room_name like CONCAT('%', #{conference_nm}, '%')
		</if>
		<if test="company_name != null and company_name !=''">
		 <!--  and b.company_name like CONCAT('%', #{company_name}, '%') -->
		and c.office_rent_id in (select office_rent_id from saehan.tb_office_rent where company_name like CONCAT('%', #{company_name}, '%') ) 
		</if>
		<if test="branch_nm != null and branch_nm !=''">
		  and a.branch_name like CONCAT('%', #{branch_nm}, '%')
		</if>
		<include refid="com.anylogic.iot.api.common.mapper.CommonMapper.pagingFooterSql" />
	</select>

	<select id="getEstimateList" parameterType="Map" resultType="Map">
	<include refid="com.anylogic.iot.api.common.mapper.CommonMapper.pagingHeaderSql" />
		select
			a.branch_name
			, d.room_name
			, c.estimate_id
			, c.office_rent_id
			, c.booking_conference_id
			, c.conference_id
			, c.client_name
			, c.client_email
			, c.client_phone
			, (select company_name from saehan.tb_office_rent where office_rent_id = c.office_rent_id ) as company_nm
			, (select to_char(meeting_start_time, 'YYYY-MM-DD HH24:MI:SS') from saehan.tb_booking_conference where booking_conference_id = c.booking_conference_id) as meeting_start_time
			, (select to_char(meeting_end_time, 'YYYY-MM-DD HH24:MI:SS') from saehan.tb_booking_conference where booking_conference_id = c.booking_conference_id) as meeting_end_time
			, c.estimate_fee 
			, to_char(c.send_dt, 'YYYY-MM-DD HH24:MI:SS') as send_dt
			, ROW_NUMBER() OVER(ORDER BY c.create_dt desc) as RNUM
		from saehan.tb_branch a, saehan.tb_booking_conference b, saehan.tb_estimate c, saehan.tb_conference d
		where   a.branch_id = d.branch_id
		and d.conference_id = b.conference_id
		and b.booking_conference_id = c.booking_conference_id
		<if test="conference_nm != null and conference_nm !=''">
		  and d.room_name like CONCAT('%', #{conference_nm}, '%')
		</if>
		<if test="company_name != null and company_name !=''">
		  and b.company_name like CONCAT('%', #{company_name}, '%')
		</if>
		<if test="branch_nm != null and branch_nm !=''">
		  and a.branch_name like CONCAT('%', #{branch_nm}, '%')
		</if>
		<include refid="com.anylogic.iot.api.common.mapper.CommonMapper.pagingFooterSql" />
	</select>
	
	
	<select id="getEstimateListExcel" parameterType="Map" resultType="com.anylogic.iot.api.admin.calc.vo.EstimateInfoVO">
	
		select
			a.branch_name
			, d.room_name
			, (select company_name from saehan.tb_office_rent where office_rent_id = c.office_rent_id ) as company_nm
			, (select to_char(meeting_start_time, 'YYYY-MM-DD') from saehan.tb_booking_conference where booking_conference_id = c.booking_conference_id) as booking_date
			, (select to_char(meeting_start_time, 'HH24:MI:SS') from saehan.tb_booking_conference where booking_conference_id = c.booking_conference_id) as booking_stime
			, (select to_char(meeting_end_time, 'HH24:MI:SS') from saehan.tb_booking_conference where booking_conference_id = c.booking_conference_id) as booking_etime
			, c.estimate_fee 
			, c.client_name
			, c.client_email
			, c.client_phone
			, to_char(c.send_dt, 'YYYY-MM-DD HH24:MI:SS') as send_dt
			, ROW_NUMBER() OVER(ORDER BY c.create_dt desc) as RNUM
		from saehan.tb_branch a, saehan.tb_booking_conference b, saehan.tb_estimate c, saehan.tb_conference d
		where   a.branch_id = d.branch_id
		and d.conference_id = b.conference_id
		and b.booking_conference_id = c.booking_conference_id
		<if test="conference_nm != null and conference_nm !=''">
		  and d.room_name like CONCAT('%', #{conference_nm}, '%')
		</if>
		<if test="company_name != null and company_name !=''">
		  and b.company_name like CONCAT('%', #{company_name}, '%')
		</if>
		<if test="branch_nm != null and branch_nm !=''">
		  and a.branch_name like CONCAT('%', #{branch_nm}, '%')
		</if>
		
	</select>
	

	<!-- 정산 조회 입주사 목록  #{pw}  and r.office_state = '2' -->
	<select id="getCalculTenantList" parameterType="Map" resultType="Map">
		<include refid="com.anylogic.iot.api.common.mapper.CommonMapper.pagingHeaderSql" />
		select t.rnum
		     , t.office_rent_id
		     , t.type
		     , t.rep_office_name
			 , t.company_name 		
			 , t.mgr_name 
			 , t.rent_strt_dt
			 , t.rent_end_dt
			 , t.start_date
			 , t.end_date
			 , t.rent_state
			 , COALESCE(t.invoice_id,0) as invoice_id
			 , t.issue_date
			 , t.issu_order_num
			 , to_char(t.start_date, 'YYYY-MM') as work_month
			 , t.issue_month
	      from (select r.office_rent_id
				     , r.type
				     , r.rep_office_name
					 , r.company_name 		
					 , r.mgr_name 
					 , r.rent_strt_dt
					 , r.rent_end_dt
					 , r.rent_state
					 , i.invoice_id
					 , i.issue_date
					 , i.start_date
					 , i.end_date
					 , i.issu_order_num
					 , i.issue_month
					 , i.deposit_status
					 , i.tax_bill_status
					 , ROW_NUMBER() OVER(ORDER BY  r.office_rent_id asc, create_dt desc) as rnum
				  from (select r.office_rent_id
						     , r.type
						     , r.rep_office_name
						     , r.company_name 		
						     , r.mgr_name 
							 , r.rent_strt_dt
							 , r.rent_end_dt
							 , r.rent_state
						  from saehan.tb_office_rent r 
						 where 1=1
						<if test="searchType != null and searchType !=''">
						  and r.company_name like CONCAT('%', #{searchType}, '%')
						</if>
				        <!--choose>
				            <when test="office_type_list.size != 0">
				                and r.type in 
				                <foreach collection="office_type_list" item="item" index="index" separator="," open="(" close=")">
				                     cast(#{item} as numeric)
				                </foreach>
				            </when>
				        </choose-->	
						) r , saehan.tb_invoice i 
					where r.office_rent_id = i.office_rent_id 
					  and i.issu_order_num = 0 or i.issu_order_num is null
		    ) t 		        
		   <!--  order by t.rnum desc -->
		<include refid="com.anylogic.iot.api.common.mapper.CommonMapper.pagingFooterSql" />
	</select>

	<!-- 정산 조회 => 원장조회  -->
	<select id="getCalculTenantOriginView" parameterType="Map" resultType="Map">
	
	select r.office_rent_id                     
		     , r.type                                   
		     , case when r.type = 1  then '오피스/지정데스크'  end type_name                            
		     , r.rep_office_name                        
		     , r.company_name
		     , r.ceo_name 	
		     , r.mgr_name
		     , r.mgr_hp_no
		     , r.mgr_email
		     , ll.*
	from saehan.tb_office_rent r
	left outer join
	(		     
	select *
		, (
			COALESCE(rent_charges,0)
			+ COALESCE(addition,0)
			+ COALESCE(non_service,0)
			+ COALESCE(non_vending ,0)                                  
			+ COALESCE(non_mul_machine   ,0)                            
			+ COALESCE(non_equip      ,0)                               
			+ COALESCE(non_css        ,0)                               
			+ COALESCE(non_cs           ,0)                             
			+ COALESCE(non_stationary        ,0)                        
			+ COALESCE(non_miscellaneous_charge    ,0)                  
			+ COALESCE(non_beverage     ,0)                             
			+ COALESCE(non_telephone       ,0)                          
			+ COALESCE(non_internet       ,0)                           
			+ COALESCE(non_installation        ,0)                      
			+ COALESCE(non_it                    ,0)                    
			+ COALESCE(non_add1            ,0)                          
			+ COALESCE(non_add2            ,0)                          
			+ COALESCE(non_parking_fee    ,0)
			) as ServiceUseTotal
		, ( (
			COALESCE(rent_charges,0)
			+ COALESCE(addition,0)
			+ COALESCE(non_service,0)
			+ COALESCE(non_vending ,0)                                  
			+ COALESCE(non_mul_machine   ,0)                            
			+ COALESCE(non_equip      ,0)                               
			+ COALESCE(non_css        ,0)                               
			+ COALESCE(non_cs           ,0)                             
			+ COALESCE(non_stationary        ,0)                        
			+ COALESCE(non_miscellaneous_charge    ,0)                  
			+ COALESCE(non_beverage     ,0)                             
			+ COALESCE(non_telephone       ,0)                          
			+ COALESCE(non_internet       ,0)                           
			+ COALESCE(non_installation        ,0)                      
			+ COALESCE(non_it                    ,0)                    
			+ COALESCE(non_add1            ,0)                          
			+ COALESCE(non_add2            ,0)                          
			+ COALESCE(non_parking_fee    ,0) 
			) * 0.1 ) :: int as VATTotal
		, ((
			COALESCE(rent_charges,0)
			+ COALESCE(addition,0)
			+ COALESCE(non_service,0)
			+ COALESCE(non_vending ,0)                                  
			+ COALESCE(non_mul_machine   ,0)                            
			+ COALESCE(non_equip      ,0)                               
			+ COALESCE(non_css        ,0)                               
			+ COALESCE(non_cs           ,0)                             
			+ COALESCE(non_stationary        ,0)                        
			+ COALESCE(non_miscellaneous_charge    ,0)                  
			+ COALESCE(non_beverage     ,0)                             
			+ COALESCE(non_telephone       ,0)                          
			+ COALESCE(non_internet       ,0)                           
			+ COALESCE(non_installation        ,0)                      
			+ COALESCE(non_it                    ,0)                    
			+ COALESCE(non_add1            ,0)                          
			+ COALESCE(non_add2            ,0)                          
			+ COALESCE(non_parking_fee    ,0)
			) 
			+ ( (
			COALESCE(rent_charges,0)
			+ COALESCE(addition,0)
			+ COALESCE(non_service,0)
			+ COALESCE(non_vending ,0)                                  
			+ COALESCE(non_mul_machine   ,0)                            
			+ COALESCE(non_equip      ,0)                               
			+ COALESCE(non_css        ,0)                               
			+ COALESCE(non_cs           ,0)                             
			+ COALESCE(non_stationary        ,0)                        
			+ COALESCE(non_miscellaneous_charge    ,0)                  
			+ COALESCE(non_beverage     ,0)                             
			+ COALESCE(non_telephone       ,0)                          
			+ COALESCE(non_internet       ,0)                           
			+ COALESCE(non_installation        ,0)                      
			+ COALESCE(non_it                    ,0)                    
			+ COALESCE(non_add1            ,0)                          
			+ COALESCE(non_add2            ,0)                          
			+ COALESCE(non_parking_fee    ,0) 
			) * 0.1 )
			) :: int as GrandTotalAmount
	from (
		select office_rent_id                             
			 , type_name                                  
			 , rep_office_name                            
			 , company_name
		     , ceo_name 	
		     , mgr_name
		     , mgr_hp_no
		     , mgr_email
			 , COALESCE(invoice_batch_id,0) as invoice_id
			 , amount
			 , TO_CHAR(amount, 'FM9,999,999,999,999,999,999,999,999') AS  amount_text   
			 , issue_date
			 , issue_date_ori
			 , create_dt
			 , work_month
			 , start_date
			 , end_date
			 , eng_start_date
			 , eng_end_date
			 , COALESCE(default_offer_time, 0) as default_offer_time
			 , COALESCE(buying_time, 0) as buying_time
			 , COALESCE(conference_time, 0) as conference_time
			 , COALESCE(fc_time, 0) as fc_time
			 , COALESCE(sleeping_time, 0) as sleeping_time
			 , COALESCE(charge_time, 0) as charge_time
			 
			 , rent_charges
			 , addition_name                                   
			 , addition    
			 
			 , service
			 , vending                                   
			 , mul_machine                               
			 , equip                                     
			 , css                                       
			 , cs                                        
			 , stationary                                
			 , miscellaneous_charge                      
			 , beverage                                  
			 , telephone                                 
			 , internet                                  
			 , installation                              
			 , it                                        
			 , add1                                      
			 , add2                                      
			 , parking_fee   
			 


			 , CASE service_vat WHEN 1 THEN (service / 1.1)::int ELSE service END as non_service
			 , CASE vending_vat WHEN 1 THEN (vending / 1.1)::int ELSE vending END as non_vending                                   
			 , CASE mul_machine_vat WHEN 1 THEN (mul_machine / 1.1)::int ELSE mul_machine END as non_mul_machine                               
			 , CASE equip_vat WHEN 1 THEN (equip / 1.1)::int ELSE equip END as non_equip                                     
			 , CASE css_vat WHEN 1 THEN (css / 1.1)::int ELSE css END as non_css                                       
			 , CASE cs_vat WHEN 1 THEN (cs / 1.1)::int ELSE cs END as non_cs                                        
			 , CASE stationary_vat WHEN 1 THEN (stationary / 1.1)::int ELSE stationary END as non_stationary                                
			 , CASE miscellaneous_charge_vat WHEN 1 THEN (miscellaneous_charge / 1.1)::int ELSE miscellaneous_charge END as non_miscellaneous_charge                      
			 , CASE beverage_vat WHEN 1 THEN (beverage / 1.1)::int ELSE beverage END as non_beverage                                  
			 , CASE telephone_vat WHEN 1 THEN (telephone / 1.1)::int ELSE telephone END as non_telephone                                 
			 , CASE internet_vat WHEN 1 THEN (internet / 1.1)::int ELSE internet END as non_internet                                  
			 , CASE installation_vat WHEN 1 THEN (installation / 1.1)::int ELSE installation END as non_installation                              
			 , CASE it_vat WHEN 1 THEN (it / 1.1)::int ELSE it END as non_it                                        
			 , CASE add1_vat WHEN 1 THEN (add1 / 1.1)::int ELSE add1 END as non_add1                                      
			 , CASE add2_vat WHEN 1 THEN (add2 / 1.1)::int ELSE add2 END as non_add2                                      
			 , CASE parking_fee_vat WHEN 1 THEN (parking_fee / 1.1)::int ELSE parking_fee END as non_parking_fee   
			 
			 
			 , service_vat                 
			 , vending_vat                 
			 , mul_machine_vat             
			 , equip_vat                   
			 , css_vat                     
			 , cs_vat                      
			 , stationary_vat              
			 , miscellaneous_charge_vat    
			 , beverage_vat                
			 , telephone_vat               
			 , internet_vat                
			 , installation_vat            
			 , it_vat                      
			 , add1_vat                    
			 , add2_vat                    
			 , parking_fee_vat                    
			 
			 , service_remark
			 , vending_remark               
			 , mul_machine_remark           
			 , equip_remark                 
			 , css_remark                   
			 , cs_remark                    
			 , stationary_remark            
			 , miscellaneous_charge_remark  
			 , beverage_remark              
			 , telephone_remark             
			 , internet_remark              
			 , installation_remark          
			 , it_remark                    
			 , add1_remark                  
			 , add2_remark                  
			 , parking_fee_remark                  
			 , default_use_period           
			 , default_use_time             
			 , perchase_use_peroid          
			 , perchase_use_time            
			 , issue_status
			 , issue_month
  		  from (select r.office_rent_id                             
				     , r.type_name                                  
				     , r.rep_office_name                            
					 , r.company_name 
				     , r.ceo_name 	
				     , r.mgr_name
				     , r.mgr_hp_no
				     , r.mgr_email
					 , i.invoice_batch_id
					 , i.amount
					 , COALESCE(i.issue_date, to_date('9999-01-01', 'yyy-mm-dd')) as issue_date
					 , to_char(i.create_dt, 'YYYY-MM-DD') as create_dt
					 , i.issue_date as issue_date_ori
					 , to_char(i.start_date, 'YYYY-MM') as work_month
					 , i.start_date
					 , i.end_date
					 , TO_CHAR(i.start_date, 'MonDD') as eng_start_date
					 , TO_CHAR(i.end_date, 'MonDD') as eng_end_date
					 , i.default_offer_time
					 , i.buying_time
					 , i.conference_time
					 , i.fc_time
					 , i.sleeping_time
					 , i.charge_time
					 
				     , i.rent_charges                                 
				     , i.addition
				     , i.service                                                
				     , i.vending                                   
				     , i.mul_machine                               
				     , i.equip                                     
				     , i.css                                       
				     , i.cs                                        
				     , i.stationary                                
				     , i.miscellaneous_charge                      
				     , i.beverage                                  
				     , i.telephone                                 
				     , i.internet                                  
				     , i.installation                              
				     , i.it                                        
				     , i.add1                                      
				     , i.add2                                      
				     , i.parking_fee   
				     
				     
				     , vt.service_vat                 
				     , vt.vending_vat                 
				     , vt.mul_machine_vat             
				     , vt.equip_vat                   
				     , vt.css_vat                     
				     , vt.cs_vat                      
				     , vt.stationary_vat              
				     , vt.miscellaneous_charge_vat    
				     , vt.beverage_vat                
				     , vt.telephone_vat               
				     , vt.internet_vat                
				     , vt.installation_vat            
				     , vt.it_vat                      
				     , vt.add1_vat                    
				     , vt.add2_vat                    
				     , vt.parking_fee_vat  
     				     
				     , i.service_remark
				     , i.vending_remark               
				     , i.mul_machine_remark           
				     , i.equip_remark                 
				     , i.css_remark                   
				     , i.cs_remark                    
				     , i.stationary_remark            
				     , i.miscellaneous_charge_remark  
				     , i.beverage_remark              
				     , i.telephone_remark             
				     , i.internet_remark              
				     , i.installation_remark          
				     , i.it_remark                    
				     , i.add1_remark                  
				     , i.add2_remark                  
				     , i.parking_fee_remark                  
				     , i.default_use_period           
				     , i.default_use_time             
				     , i.perchase_use_peroid          
				     , i.perchase_use_time            
				     , i.issue_status
				     , i.addition_name
				     , i.issue_month
				     , ROW_NUMBER() OVER(ORDER BY COALESCE(i.issu_order_num ,0) desc) as RNUM
				  from (select r.office_rent_id                     
						     , r.type                                   
						     , case when r.type = 1  then '오피스/지정데스크'      
						        end type_name                            
						     , r.rep_office_name                        
						     , r.company_name
						     , r.ceo_name 	
						     , r.mgr_name
						     , r.mgr_hp_no
						     , r.mgr_email
					  	  from saehan.tb_office_rent r                  
					     where r.office_rent_id = CAST(#{office_rent_id} AS numeric)
					   ) r 
                       , saehan.tb_invoice_batch i  , saehan.tb_vat_template vt
				   where r.office_rent_id = i.office_rent_id
				     and (to_char(i.start_date, 'YYYY-MM') = #{one_ago_month} or to_char(i.end_date, 'YYYY-MM') = #{one_ago_month})
 		       ) t  		
 	) rr
 	)ll
 	on r.office_rent_id = ll.office_rent_id
 	where r.office_rent_id = CAST(#{office_rent_id} AS numeric)
	</select>
	
	<!-- 정산 조회 => 원장조회 후 작성하기 조회  -->
	<select id="getInvoinceIdForOrigin" parameterType="Map" resultType="String">
		select invoice_id
          from saehan.tb_invoice        
	     where office_rent_id = #{office_rent_id}::int
/*	       and COALESCE(issu_order_num,0)  = 0 */
	       and issu_order_num = 0
		   and (to_char(start_date, 'YYYY-MM') = #{one_ago_month} or to_char(end_date, 'YYYY-MM') = #{one_ago_month})
	</select>	

	<!-- 정산 조회 => 인보이스  조회  -->
	<select id="getCalculTenantView" parameterType="Map" resultType="Map">
		select office_rent_id                             
			 , type_name                                  
			 , rep_office_name                            
			 , company_name
		     , ceo_name 	
		     , mgr_name
		     , mgr_hp_no
		     , mgr_email
			 , COALESCE(invoice_id,0) as invoice_id
			 , amount
			 , TO_CHAR(amount, 'FM9,999,999,999,999,999,999,999,999') AS  amount_text   
			 , issue_date
			 , issue_date_ori
			 , create_dt
			 , work_month
			 , start_date
			 , end_date
			 , eng_start_date
			 , eng_end_date
			 , COALESCE(default_offer_time, 0) as default_offer_time
			 , COALESCE(buying_time, 0) as buying_time
			 , COALESCE(conference_time, 0) as conference_time
			 , COALESCE(fc_time, 0) as fc_time
			 , COALESCE(sleeping_time, 0) as sleeping_time
			 , COALESCE(charge_time, 0) as charge_time
			 , rent_charges
			 , addition_name                                   
			 , addition    
			 , service
			 , vending                                   
			 , mul_machine                               
			 , equip                                     
			 , css                                       
			 , cs                                        
			 , stationary                                
			 , miscellaneous_charge                      
			 , beverage                                  
			 , telephone                                 
			 , internet                                  
			 , installation                              
			 , it                                        
			 , add1                                      
			 , add2                                      
			 , parking_fee   
			 , service_vat                 
			 , vending_vat                 
			 , mul_machine_vat             
			 , equip_vat                   
			 , css_vat                     
			 , cs_vat                      
			 , stationary_vat              
			 , miscellaneous_charge_vat    
			 , beverage_vat                
			 , telephone_vat               
			 , internet_vat                
			 , installation_vat            
			 , it_vat                      
			 , add1_vat                    
			 , add2_vat                    
			 , parking_fee_vat   

			 
			 
			 , service_remark
			 , vending_remark               
			 , mul_machine_remark           
			 , equip_remark                 
			 , css_remark                   
			 , cs_remark                    
			 , stationary_remark            
			 , miscellaneous_charge_remark  
			 , beverage_remark              
			 , telephone_remark             
			 , internet_remark              
			 , installation_remark          
			 , it_remark                    
			 , add1_remark                  
			 , add2_remark                  
			 , parking_fee_remark                  
			 , default_use_period           
			 , default_use_time             
			 , perchase_use_peroid          
			 , perchase_use_time            
			 , issue_status
			 , issue_month
			 , deposit_status
			 , tax_bill_status
  		  from (select r.office_rent_id                             
				     , r.type_name                                  
				     , r.rep_office_name                            
					 , r.company_name 
				     , r.ceo_name 	
				     , r.mgr_name
				     , r.mgr_hp_no
				     , r.mgr_email
					 , i.invoice_id
					 , i.amount
					 , to_char(i.create_dt, 'YYYY-MM-DD') as create_dt
					 , COALESCE(i.issue_date, to_date('9999-01-01', 'yyy-mm-dd')) as issue_date
					 , i.issue_date as issue_date_ori
					 , to_char(i.start_date, 'YYYY-MM') as work_month
					 , i.start_date
					 , i.end_date
					 , TO_CHAR(i.start_date, 'MonDD') as eng_start_date
					 , TO_CHAR(i.end_date, 'MonDD') as eng_end_date
					 , i.default_offer_time
					 , i.buying_time
					 , i.conference_time
					 , i.fc_time
					 , i.sleeping_time
					 , i.charge_time
				     , i.rent_charges                                 
				     , i.addition
				     , i.service                                                
				     , i.vending                                   
				     , i.mul_machine                               
				     , i.equip                                     
				     , i.css                                       
				     , i.cs                                        
				     , i.stationary                                
				     , i.miscellaneous_charge                      
				     , i.beverage                                  
				     , i.telephone                                 
				     , i.internet                                  
				     , i.installation                              
				     , i.it                                        
				     , i.add1                                      
				     , i.add2                                      
				     , i.parking_fee   
				     , i.service_vat                 
				     , i.vending_vat                 
				     , i.mul_machine_vat             
				     , i.equip_vat                   
				     , i.css_vat                     
				     , i.cs_vat                      
				     , i.stationary_vat              
				     , i.miscellaneous_charge_vat    
				     , i.beverage_vat                
				     , i.telephone_vat               
				     , i.internet_vat                
				     , i.installation_vat            
				     , i.it_vat                      
				     , i.add1_vat                    
				     , i.add2_vat                    
				     , i.parking_fee_vat            

				           
				     , i.service_remark
				     , i.vending_remark               
				     , i.mul_machine_remark           
				     , i.equip_remark                 
				     , i.css_remark                   
				     , i.cs_remark                    
				     , i.stationary_remark            
				     , i.miscellaneous_charge_remark  
				     , i.beverage_remark              
				     , i.telephone_remark             
				     , i.internet_remark              
				     , i.installation_remark          
				     , i.it_remark                    
				     , i.add1_remark                  
				     , i.add2_remark                  
				     , i.parking_fee_remark                  
				     , i.default_use_period           
				     , i.default_use_time             
				     , i.perchase_use_peroid          
				     , i.perchase_use_time            
				     , i.issue_status
				     , i.addition_name
				     , i.issue_month
				     , i.deposit_status
			 		 , i.tax_bill_status
				     , ROW_NUMBER() OVER(ORDER BY COALESCE(i.issu_order_num ,0) desc) as RNUM
				  from (select r.office_rent_id                     
						     , r.type                                   
						     , case when r.type = 1  then '오피스/지정데스크'      
						        end type_name                            
						     , r.rep_office_name                        
						     , r.company_name
						     , r.ceo_name 	
						     , r.mgr_name
						     , r.mgr_hp_no
						     , r.mgr_email
					  	  from saehan.tb_office_rent r                  
					     where r.office_rent_id = CAST(#{office_rent_id} AS numeric)
					   ) r 
                       , saehan.tb_invoice i        
				   where r.office_rent_id = i.office_rent_id 	
				     and (to_char(i.start_date, 'YYYY-MM') = #{one_ago_month} or to_char(i.end_date, 'YYYY-MM') = #{one_ago_month})
				     and i.invoice_id = CAST(#{invoice_id} AS numeric)
 		       ) t  		
	</select>
	
	
	<!-- 정산 조회 - 인보이스 작성  issue_date -->
	<update id="invoiceWrite" parameterType="Map">
	UPDATE saehan.tb_invoice
	   SET start_date   =	TO_DATE(#{start_date}, 'YYYY-MM-DD')           
		 , end_date   	=	TO_DATE(#{end_date}, 'YYYY-MM-DD') 
		 , addition_name  = #{addition_name}           
		 , rent_charges 				=	CAST( COALESCE(#{rent_charges}  ,0)  AS numeric)              
		 <choose>
			 <when test="addition == null or addition == ''">
			 , addition   					=	0
			 </when>
			 <otherwise>
			 , addition   					=	CAST( COALESCE(#{addition} 		,0)  AS numeric)
			 </otherwise>
		 </choose>
	     , default_offer_time  			=   CAST( COALESCE(#{default_offer_time} 	,0)	 AS numeric)
	     , buying_time  				=   CAST( COALESCE(#{buying_time} 	,0)	 AS numeric)
	     , conference_time   			=   CAST( COALESCE(#{conference_time},0) AS numeric)              
	     , fc_time   					=   CAST( COALESCE(#{fc_time} 		,0)	 AS numeric)                      
	     , sleeping_time   				=   CAST( COALESCE(#{sleeping_time} ,0)	 AS numeric)                
		 , charge_time	     			=   CAST( COALESCE(#{charge_time} 	,0)	 AS numeric)
		 , service  					=   CAST( COALESCE(#{service} 		,0)	 AS numeric)
	     , vending  					=   CAST( COALESCE(#{vending} 		,0)	 AS numeric)                 
	     , mul_machine  				=   CAST( COALESCE(#{mul_machine}   ,0)	 AS numeric)             
	     , equip  						=   CAST( COALESCE(#{equip} 		,0)	 AS numeric)                   
	     , css  						=   CAST( COALESCE(#{css} 			,0)	 AS numeric)                     
	     , cs   						=   CAST( COALESCE(#{cs} 	  		,0)	 AS numeric)                      
	     , stationary   				=   CAST( COALESCE(#{stationary} 	,0)	 AS numeric)              
	     , miscellaneous_charge 	    =   CAST( COALESCE(#{miscellaneous_charge},0) AS numeric)     
	     , beverage   					=   CAST( COALESCE(#{beverage}      ,0)  AS numeric)                
	     , telephone  					=   CAST( COALESCE(#{telephone}     ,0)  AS numeric)        

	     , internet  					=   CAST( COALESCE(#{internet}     ,0)  AS numeric)        
	     , installation  					=   CAST( COALESCE(#{installation}     ,0)  AS numeric)        
	     , it  					=   CAST( COALESCE(#{it}     ,0)  AS numeric)        
	     , add1  					=   CAST( COALESCE(#{add1}     ,0)  AS numeric)        
	     , add2  					=   CAST( COALESCE(#{add2}     ,0)  AS numeric)        
	     , parking_fee  					=   CAST( COALESCE(#{parking_fee}     ,0)  AS numeric)        
    
	     , service_remark   =  #{service_remark}                         
	     , vending_remark   =  #{vending_remark}                            
	     , mul_machine_remark =  #{mul_machine_remark}                        
	     , equip_remark   	=  #{equip_remark}                              
	     , css_remark   	=  #{css_remark}                                
	     , cs_remark  		=  #{cs_remark}                                 
	     , stationary_remark	=  #{stationary_remark}                         
	     , miscellaneous_charge_remark = #{miscellaneous_charge_remark}               
	     , beverage_remark   = #{beverage_remark}                           
	     , telephone_remark  = #{telephone_remark}  
 
	     , internet_remark  = #{internet_remark}                          
	     , installation_remark  = #{installation_remark}                          
	     , it_remark  = #{it_remark}                          
	     , add1_remark  = #{add1_remark}                          
	     , add2_remark  = #{add2_remark}                          
	     , parking_fee_remark  = #{parking_fee_remark}                          

	     , issue_status	 = #{issue_status}
	     , issu_order_num = 0	
	     , issue_date = null
	     , create_dt = now()
	     , issue_month = to_date(#{issue_month}, 'YYYY-MM-DD')
     WHERE invoice_id = cast(#{invoice_id} as numeric)
	</update>
	
	<update id="updateInvoiceVat" parameterType="Map">
	UPDATE saehan.tb_invoice
	
	SET service_vat = #{service_vat}
	     , vending_vat = #{vending_vat}
	     , mul_machine_vat = #{mul_machine_vat}
	     , equip_vat = #{equip_vat}
	     , css_vat = #{css_vat}
	     , cs_vat = #{cs_vat}
	     , stationary_vat = #{stationary_vat}
	     , miscellaneous_charge_vat = #{miscellaneous_charge_vat}
		 , beverage_vat =  #{beverage_vat}
		 , telephone_vat = #{telephone_vat}

		 , internet_vat = #{internet_vat}
		 , installation_vat = #{installation_vat}
		 , it_vat = #{it_vat}
		 , add1_vat = #{add1_vat}
		 , add2_vat = #{add2_vat}
		 , parking_fee_vat = #{parking_fee_vat}             
     WHERE invoice_id = cast(#{invoice_id} as numeric)
	</update>

	<update id="updateInvoiceTotalAmount" parameterType="Map">
	UPDATE saehan.tb_invoice
	   SET amount  =
	   (   COALESCE(rent_charges			   ,0)          
		 + COALESCE(addition                   ,0)
		 
		 + COALESCE(service                    ,0)
	     + COALESCE(vending                    ,0)
	     + COALESCE(mul_machine                ,0)
	     + COALESCE(equip  	                   ,0)
	     + COALESCE(css  	                   ,0)
	     + COALESCE(cs   	                   ,0)
	     + COALESCE(stationary                 ,0)
	     + COALESCE(miscellaneous_charge       ,0)
	     + COALESCE(beverage                   ,0)
	     + COALESCE(telephone                  ,0)
	     + COALESCE(internet                   ,0)
	     + COALESCE(installation               ,0)
	     + COALESCE(it   	                   ,0)
	     + COALESCE(add1   	                   ,0)
	     + COALESCE(add2   	                   ,0)
	     + COALESCE(parking_fee   	                   ,0)
	     - (
		     service * 0.1 * COALESCE(service_vat   ,0)
		     + vending * 0.1 * COALESCE(vending_vat,0)
		     + mul_machine * 0.1 * COALESCE(mul_machine_vat ,0)
		     + equip * 0.1 * COALESCE(equip_vat  ,0)
		     + css * 0.1 * COALESCE(css_vat   ,0)
		     + cs * 0.1 * COALESCE(cs_vat  ,0)
		     + stationary * 0.1 * COALESCE(stationary_vat   ,0)
		     + miscellaneous_charge * 0.1 * COALESCE(miscellaneous_charge_vat   ,0)   
		     + beverage * 0.1 * COALESCE(beverage_vat   ,0)
		     + telephone * 0.1 * COALESCE(telephone_vat    ,0)
		     + internet * 0.1 * COALESCE(internet_vat   ,0)
		     + installation * 0.1 * COALESCE(installation_vat  ,0)
		     + it * 0.1 * COALESCE(it_vat  ,0)
		     + add1 * 0.1 * COALESCE(add1_vat  ,0)
		     + add2 * 0.1 * COALESCE(add2_vat  ,0)
		     + parking_fee * 0.1 * COALESCE(parking_fee_vat ,0)
	     )
		)::int
     WHERE invoice_id = cast(#{invoice_id} as numeric)
	</update>
	
	<!-- VAT 예외항목 Default 설정 조회-->
	<select id="getInvoiceSetVatDefault" parameterType="Map" resultType="Map">
		select vat_template_id
			 ,  service_vat	     
			 ,  vending_vat
			 ,  mul_machine_vat
			 ,  equip_vat
			 ,  css_vat
			 ,  cs_vat
			 ,  stationary_vat
			 ,  miscellaneous_charge_vat
			 ,  beverage_vat
			 ,  telephone_vat
			 ,  internet_vat
			 ,  installation_vat
			 ,  it_vat
			 ,  add1_vat
			 ,  add2_vat
			 ,  parking_fee_vat
		  from saehan.tb_vat_template
	</select>	
	
	<insert id="insertInvoicevattemplate" parameterType="Map">
		INSERT INTO saehan.tb_vat_template
		      (
	           vat_template_id
	         , service_vat
			 , vending_vat                 
			 , mul_machine_vat             
			 , equip_vat                   
			 , css_vat                     
			 , cs_vat                      
			 , stationary_vat              
			 , miscellaneous_charge_vat    
			 , beverage_vat                
			 , telephone_vat               
			 , internet_vat                
			 , installation_vat            
			 , it_vat 
			 , add1_vat 
			 , add2_vat 
			 , parking_fee_vat 
			 , modify_date                     
	         )
  	  VALUES (
  	           nextval('saehan.tb_vat_template_vat_template_id_seq')
			 , COALESCE(#{chk_service_vat}, 0)
			 , COALESCE(#{chk_vending_vat}, 0)
			 , COALESCE(#{chk_mul_machine_vat}, 0)
			 , COALESCE(#{chk_equip_vat}, 0)
			 , COALESCE(#{chk_css_vat}, 0)	         
			 , COALESCE(#{chk_cs_vat}, 0)
			 , COALESCE(#{chk_stationary_vat}, 0)
			 , COALESCE(#{chk_miscellaneous_charge_vat}, 0)
			 , COALESCE(#{chk_beverage_vat}, 0)
			 , COALESCE(#{chk_telephone_vat}, 0)
			 , COALESCE(#{chk_internet_vat}, 0)
			 , COALESCE(#{chk_installation_vat}, 0)
			 , COALESCE(#{chk_it_vat}, 0)			 
			 , COALESCE(#{chk_add1_vat}, 0)			 
			 , COALESCE(#{chk_add2_vat}, 0)			 
			 , COALESCE(#{chk_parking_fee_vat}, 0)			 
             , now()
            )
	</insert>	

	<update id="updateInvoicevattemplate" parameterType="Map">
		UPDATE saehan.tb_vat_template
		   SET service_vat					= COALESCE(#{service_vat}, 0)
		     , vending_vat					= COALESCE(#{vending_vat}, 0)
			 , mul_machine_vat				= COALESCE(#{mul_machine_vat}, 0)
			 , equip_vat						= COALESCE(#{equip_vat}, 0)
			 , css_vat							= COALESCE(#{css_vat}, 0)
			 , cs_vat							= COALESCE(#{cs_vat}, 0)
			 , stationary_vat					= COALESCE(#{stationary_vat}, 0)
			 , miscellaneous_charge_vat	= COALESCE(#{miscellaneous_charge_vat}, 0)
			 , beverage_vat					= COALESCE(#{beverage_vat}, 0)
			 , telephone_vat				= COALESCE(#{telephone_vat}, 0)
			 , internet_vat					= COALESCE(#{internet_vat}, 0)
			 , installation_vat				= COALESCE(#{installation_vat}, 0)
			 , it_vat							= COALESCE(#{it_vat}, 0)	       
			 , add1_vat						= COALESCE(#{add1_vat}, 0)	       
			 , add2_vat						= COALESCE(#{add2_vat}, 0)	       
			 , parking_fee_vat				= COALESCE(#{parking_fee_vat}, 0)	       
			 , modify_date = now()                     
	     WHERE vat_template_id = cast(#{vat_template_id} as numeric)
	</update>
		
	<!-- 정산 조회 : 인보이스 확정 목록 - 임대 -->
	<select id="getInvoiceList" parameterType="Map" resultType="Map">
	
	<include refid="com.anylogic.iot.api.common.mapper.CommonMapper.pagingHeaderSql" />

		select t.rnum
		     , t.rnum_rent
			 , COALESCE(t.invoice_id,0) as invoice_id
		     , t.office_rent_id
		     , t.type
		     , t.type_name
		     , t.rep_office_name
			 , t.company_name 		
			 , t.mgr_name 
			 , t.service_type
			 , t.work_type
			 , t.company_number
			 , to_char(t.start_date,'YYYY-MM') as invoice_yyyy_mm
			 , to_char(t.issue_date,'YYYY.MM.dd') as issue_date
			 , TO_CHAR(t.amount, 'FM9,999,999,999,999,999,999,999,999') AS  amount_text
			 , t.amount
			 , t.issu_order_num
			 , t.deposit_status
			 , t.tax_bill_status
			 , t.booking_id
	      from (select r.rnum_rent
				     , r.office_rent_id
				     , r.type
				     , r.type_name
				     , r.rep_office_name
					 , r.company_name 		
					 , r.mgr_name 
					 , r.service_type
					 , r.work_type
					 , r.company_number
					 , ROW_NUMBER() OVER(ORDER BY i.office_rent_id, COALESCE(i.issu_order_num ,0) desc) as rnum
					 , i.invoice_id
					 , i.start_date
					 , i.issue_date
					 , i.amount
					 , i.issu_order_num
					 , i.deposit_status
					 , i.tax_bill_status
					 , i.booking_id
				  from (select r.office_rent_id
						     , r.type
						     , case when r.type = 1  then '오피스/지정데스크'      when r.type = 4  then '미팅고객'      
						        end type_name                            
						     , r.rep_office_name
						     , r.company_name 		
						     , r.mgr_name 
							 , r.rent_strt_dt
							 , r.rent_end_dt
							 , r.rent_state
							 , r.service_type
							 , r.work_type
							 , r.company_number
							 , ROW_NUMBER() OVER(ORDER BY r.office_rent_id asc) as rnum_rent
						  from saehan.tb_office_rent r 
						 where  ( r.payment_type in( 'T', 'C') )  
							<if test="searchType != null and searchType !=''">
							  and r.company_name like CONCAT('%', #{searchType}, '%')
							</if>
						) r , saehan.tb_invoice i 
					where r.office_rent_id = i.office_rent_id and i.issue_status = 'Y' and  i.booking_id is null
		    ) t 		        
		    order by t.rnum	

		<include refid="com.anylogic.iot.api.common.mapper.CommonMapper.pagingFooterSql" />		    
	</select>
	
	
	
	
	<!-- 정산 조회 : 인보이스 확정 목록 - 대관 -->
	<select id="getInvoiceListRental" parameterType="Map" resultType="Map">
	
	<include refid="com.anylogic.iot.api.common.mapper.CommonMapper.pagingHeaderSql" />

		select t.rnum
		     , t.rnum_rent
			 , COALESCE(t.invoice_id,0) as invoice_id
		     , t.office_rent_id
		     , t.type
		     , t.type_name
		     , t.rep_office_name
			 , t.company_name 		
			 , t.mgr_name 
			 , t.service_type
			 , t.work_type
			 , t.company_number
			 , to_char(t.start_date,'YYYY-MM') as invoice_yyyy_mm
			 , to_char(t.issue_date,'YYYY.MM.dd') as issue_date
			 , TO_CHAR(t.amount, 'FM9,999,999,999,999,999,999,999,999') AS  amount_text
			 , t.amount
			 , t.issu_order_num
			 , t.deposit_status
			 , t.tax_bill_status
			 , t.booking_id
	      from (select r.rnum_rent
				     , r.office_rent_id
				     , r.type
				     , r.type_name
				     , r.rep_office_name
					 , r.company_name 		
					 , r.mgr_name 
					 , r.service_type
					 , r.work_type
					 , r.company_number
					 , ROW_NUMBER() OVER(ORDER BY i.office_rent_id, COALESCE(i.issu_order_num ,0) desc) as rnum
					 , i.invoice_id
					 , i.start_date
					 , i.issue_date
					 , i.amount
					 , i.issu_order_num
					 , i.deposit_status
					 , i.tax_bill_status
					 , i.booking_id
				  from (select r.office_rent_id
						     , r.type
						     , case when r.type = 1  then '오피스/지정데스크'      when r.type = 4  then '미팅고객'      
						        end type_name                            
						     , r.rep_office_name
						     , r.company_name 		
						     , r.mgr_name 
							 , r.rent_strt_dt
							 , r.rent_end_dt
							 , r.rent_state
							 , r.service_type
							 , r.work_type
							 , r.company_number
							 , ROW_NUMBER() OVER(ORDER BY r.office_rent_id asc) as rnum_rent
						  from saehan.tb_office_rent r 
						 where  ( r.payment_type in( 'T','C') )  
							<if test="searchType != null and searchType !=''">
							  and r.company_name like CONCAT('%', #{searchType}, '%')
							</if>
						) r , saehan.tb_invoice i 
					where r.office_rent_id = i.office_rent_id and i.issue_status = 'Y' and  i.booking_id is not null
		    ) t 		        
		    order by t.rnum	

		<include refid="com.anylogic.iot.api.common.mapper.CommonMapper.pagingFooterSql" />		    
	</select>
	



	<!-- 정산 조회 : 인보이스 확정 목록 (최종 이력 가져오기 : 임대) -->
	<select id="getInvoiceLastList" parameterType="Map" resultType="Map">
		<include refid="com.anylogic.iot.api.common.mapper.CommonMapper.pagingHeaderSql" />
	
 		select  ROW_NUMBER() OVER(ORDER BY t.invoice_id desc) as rnum
			 ,  t.invoice_id
		     , t.office_rent_id
		     , t.type
		     , t.type_name
		     , t.rep_office_name
			 , t.company_name 		
			 , t.mgr_name 
			 , to_char(t.start_date,'YYYY-MM') as invoice_yyyy_mm
			 , to_char(t.issue_date,'YYYY.MM.dd') as issue_date
			 , TO_CHAR(t.amount, 'FM9,999,999,999,999,999,999,999,999') AS  amount_text
			 , t.amount
			 , t.issu_order_num
			 , t.deposit_status
			 , t.tax_bill_status
			 , t.booking_id
			 , t.company_number
			 , t.service_type
			 , t.work_type
	      from (select i.office_rent_id
				     , max(r.type) as type
				     , max(r.type_name) as type_name
				     , max(r.rep_office_name) as rep_office_name
					 , max(r.company_name) as company_name	 	
					 , max(r.mgr_name) as mgr_name
					 , max(i.invoice_id) as invoice_id
					 , max(i.start_date) as start_date
					 , max(i.issue_date) as issue_date
					 , max(i.amount) as amount
					 , max(i.issu_order_num) as issu_order_num
					 , max(i.deposit_status) as deposit_status
					 , max(i.tax_bill_status) as tax_bill_status
					 , max(i.booking_id) as booking_id
					 , max(r.company_number) as company_number
					 , max(r.service_type) as service_type
					 , max(r.work_type) as work_type
				  from (select r.office_rent_id
						     , r.type
						     , case when r.type = 1  then '오피스/지정데스크'           when r.type = 4  then '미팅고객'      
						        end type_name                            
						     , r.rep_office_name
						     , r.company_name 		
						     , r.mgr_name 
							 , r.rent_strt_dt
							 , r.rent_end_dt
							 , r.rent_state
							 , r.service_type
							 , r.work_type
							 , r.company_number
						  from saehan.tb_office_rent r
						 where 1=1
							<if test="searchType != null and searchType !=''">
							  and r.company_name like CONCAT('%', #{searchType}, '%')
							</if>
						) r , saehan.tb_invoice i 
					where r.office_rent_id = i.office_rent_id and i.issue_status = 'Y' and i.booking_id is null
					group by i.office_rent_id
					order by max(i.issu_order_num)
		    ) t 	
		    order by t.invoice_id desc	
		<include refid="com.anylogic.iot.api.common.mapper.CommonMapper.pagingFooterSql" />		    
	</select>
	
	
	
	
	
	
		    
	<!-- 정산 조회 : 인보이스 확정 목록 (최종 이력 가져오기 : 대관) -->
	<select id="getInvoiceLastListRental" parameterType="Map" resultType="Map">
		<include refid="com.anylogic.iot.api.common.mapper.CommonMapper.pagingHeaderSql" />
		 
		    select   ROW_NUMBER() OVER(ORDER BY t.invoice_id desc) as rnum
			 ,  t.invoice_id
		     , t.office_rent_id
		     , t.type
		     , t.type_name
		     , t.rep_office_name
			 , t.company_name 		
			 , t.mgr_name 
			 , to_char(t.start_date,'YYYY-MM') as invoice_yyyy_mm
			 , to_char(t.issue_date,'YYYY.MM.dd') as issue_date
			 , TO_CHAR(t.amount, 'FM9,999,999,999,999,999,999,999,999') AS  amount_text
			 , t.amount
			 , t.issu_order_num
			 , t.deposit_status
			 , t.tax_bill_status
			 , t.booking_id
			 , t.company_number
			  , t.service_type
			 , t.work_type
	      from (select i.booking_id,
	      				max(i.office_rent_id) as office_rent_id
				     , max(r.type) as type
				     , max(r.type_name) as type_name
				     , max(r.rep_office_name) as rep_office_name
					 , max(r.company_name) as company_name	 	
					 , max(r.mgr_name) as mgr_name
					 , max(i.invoice_id) as invoice_id
					 , max(i.start_date) as start_date
					 , max(i.issue_date) as issue_date
					 , max(i.amount) as amount
					 , max(i.issu_order_num) as issu_order_num
					 , max(i.deposit_status) as deposit_status
					 , max(i.tax_bill_status) as tax_bill_status
					 , max(r.company_number) as company_number
					 , max(r.service_type) as service_type
					 , max(r.work_type) as work_type
				  from (select r.office_rent_id
						     , r.type
						     , case when r.type = 1  then '오피스/지정데스크'           when r.type = 4  then '미팅고객'      
						        end type_name                            
						     , r.rep_office_name
						     , r.company_name 		
						     , r.mgr_name 
							 , r.rent_strt_dt
							 , r.rent_end_dt
							 , r.rent_state
							 , r.company_number
							 , r.service_type
							 , r.work_type
						  from saehan.tb_office_rent r
						 where 1=1
						<if test="searchType != null and searchType !=''">
						  and r.company_name like CONCAT('%', #{searchType}, '%')
						</if>
						) r , saehan.tb_invoice i 
					where r.office_rent_id = i.office_rent_id and i.issue_status = 'Y' and  i.booking_id is not null
					group by i.booking_id
					order by max(i.issu_order_num)
		    ) t 	
		    order by t.invoice_id desc	

		<include refid="com.anylogic.iot.api.common.mapper.CommonMapper.pagingFooterSql" />		    
	</select>
	
	
	
	
	<!-- 정산 조회 => Invoice 확정 상세 조회  -->
	<select id="getInvoiceView" parameterType="Map" resultType="Map">
	
	
	select *
		, (
			COALESCE(rent_charges,0)
			+ COALESCE(addition,0)
			+ COALESCE(non_service,0)
			+ COALESCE(non_vending ,0)                                  
			+ COALESCE(non_mul_machine   ,0)                            
			+ COALESCE(non_equip      ,0)                               
			+ COALESCE(non_css        ,0)                               
			+ COALESCE(non_cs           ,0)                             
			+ COALESCE(non_stationary        ,0)                        
			+ COALESCE(non_miscellaneous_charge    ,0)                  
			+ COALESCE(non_beverage     ,0)                             
			+ COALESCE(non_telephone       ,0)                          
			+ COALESCE(non_internet       ,0)                           
			+ COALESCE(non_installation        ,0)                      
			+ COALESCE(non_it                    ,0)                    
			+ COALESCE(non_add1            ,0)                          
			+ COALESCE(non_add2            ,0)                          
			+ COALESCE(non_parking_fee    ,0)
			) as ServiceUseTotal
		, ( (
			COALESCE(rent_charges,0)
			+ COALESCE(addition,0)
			+ COALESCE(non_service,0)
			+ COALESCE(non_vending ,0)                                  
			+ COALESCE(non_mul_machine   ,0)                            
			+ COALESCE(non_equip      ,0)                               
			+ COALESCE(non_css        ,0)                               
			+ COALESCE(non_cs           ,0)                             
			+ COALESCE(non_stationary        ,0)                        
			+ COALESCE(non_miscellaneous_charge    ,0)                  
			+ COALESCE(non_beverage     ,0)                             
			+ COALESCE(non_telephone       ,0)                          
			+ COALESCE(non_internet       ,0)                           
			+ COALESCE(non_installation        ,0)                      
			+ COALESCE(non_it                    ,0)                    
			+ COALESCE(non_add1            ,0)                          
			+ COALESCE(non_add2            ,0)                          
			+ COALESCE(non_parking_fee    ,0) 
			) * 0.1 ) :: int as VATTotal
		, ((
			COALESCE(rent_charges,0)
			+ COALESCE(addition,0)
			+ COALESCE(non_service,0)
			+ COALESCE(non_vending ,0)                                  
			+ COALESCE(non_mul_machine   ,0)                            
			+ COALESCE(non_equip      ,0)                               
			+ COALESCE(non_css        ,0)                               
			+ COALESCE(non_cs           ,0)                             
			+ COALESCE(non_stationary        ,0)                        
			+ COALESCE(non_miscellaneous_charge    ,0)                  
			+ COALESCE(non_beverage     ,0)                             
			+ COALESCE(non_telephone       ,0)                          
			+ COALESCE(non_internet       ,0)                           
			+ COALESCE(non_installation        ,0)                      
			+ COALESCE(non_it                    ,0)                    
			+ COALESCE(non_add1            ,0)                          
			+ COALESCE(non_add2            ,0)                          
			+ COALESCE(non_parking_fee    ,0)
			) 
			+ ( (
			COALESCE(rent_charges,0)
			+ COALESCE(addition,0)
			+ COALESCE(non_service,0)
			+ COALESCE(non_vending ,0)                                  
			+ COALESCE(non_mul_machine   ,0)                            
			+ COALESCE(non_equip      ,0)                               
			+ COALESCE(non_css        ,0)                               
			+ COALESCE(non_cs           ,0)                             
			+ COALESCE(non_stationary        ,0)                        
			+ COALESCE(non_miscellaneous_charge    ,0)                  
			+ COALESCE(non_beverage     ,0)                             
			+ COALESCE(non_telephone       ,0)                          
			+ COALESCE(non_internet       ,0)                           
			+ COALESCE(non_installation        ,0)                      
			+ COALESCE(non_it                    ,0)                    
			+ COALESCE(non_add1            ,0)                          
			+ COALESCE(non_add2            ,0)                          
			+ COALESCE(non_parking_fee    ,0) 
			) * 0.1 )
			) :: int as GrandTotalAmount
	from (
	
		select office_rent_id                             
			 , type_name                                  
			 , rep_office_name                            
			 , company_name
		     , ceo_name 	
		     , mgr_name
		     , mgr_hp_no
		     , mgr_email
			 , COALESCE(invoice_id,0) as invoice_id
			 , amount
			 , TO_CHAR(amount, 'FM9,999,999,999,999,999,999,999,999') AS  amount_text
			 , TO_CHAR(issue_date, 'YYYY-MM-DD') AS  issue_date 
			 , to_char(start_date,'YYYY-MM') as invoice_yyyy_mm
			 , to_char(start_date,'YYYY-MM-dd') as start_date
 		     , to_char(end_date,'YYYY-MM-dd') as end_date
 		     , to_char(create_dt,'YYYY-MM-dd') as create_dt
			 , rent_charges 
			 , addition_name                                
			 , case when addition_name = '' then null else addition end as addition
			 , default_offer_time
			 , buying_time
			 , conference_time
			 , fc_time
			 , sleeping_time
			 , charge_time
             , service
			 , vending                                   
			 , mul_machine                               
			 , equip                                     
			 , css                                       
			 , cs                                        
			 , stationary                                
			 , miscellaneous_charge                      
			 , beverage                                  
			 , telephone                                 
			 , internet                                  
			 , installation                              
			 , it                                        
			 , add1                                      
			 , add2                                      
			 , parking_fee 
			 
			 
			 

			 , CASE service_vat WHEN 1 THEN (service / 1.1)::int ELSE service END as non_service
			 , CASE vending_vat WHEN 1 THEN (vending / 1.1)::int ELSE vending END as non_vending                                   
			 , CASE mul_machine_vat WHEN 1 THEN (mul_machine / 1.1)::int ELSE mul_machine END as non_mul_machine                               
			 , CASE equip_vat WHEN 1 THEN (equip / 1.1)::int ELSE equip END as non_equip                                     
			 , CASE css_vat WHEN 1 THEN (css / 1.1)::int ELSE css END as non_css                                       
			 , CASE cs_vat WHEN 1 THEN (cs / 1.1)::int ELSE cs END as non_cs                                        
			 , CASE stationary_vat WHEN 1 THEN (stationary / 1.1)::int ELSE stationary END as non_stationary                                
			 , CASE miscellaneous_charge_vat WHEN 1 THEN (miscellaneous_charge / 1.1)::int ELSE miscellaneous_charge END as non_miscellaneous_charge                      
			 , CASE beverage_vat WHEN 1 THEN (beverage / 1.1)::int ELSE beverage END as non_beverage                                  
			 , CASE telephone_vat WHEN 1 THEN (telephone / 1.1)::int ELSE telephone END as non_telephone                                 
			 , CASE internet_vat WHEN 1 THEN (internet / 1.1)::int ELSE internet END as non_internet                                  
			 , CASE installation_vat WHEN 1 THEN (installation / 1.1)::int ELSE installation END as non_installation                              
			 , CASE it_vat WHEN 1 THEN (it / 1.1)::int ELSE it END as non_it                                        
			 , CASE add1_vat WHEN 1 THEN (add1 / 1.1)::int ELSE add1 END as non_add1                                      
			 , CASE add2_vat WHEN 1 THEN (add2 / 1.1)::int ELSE add2 END as non_add2                                      
			 , CASE parking_fee_vat WHEN 1 THEN (parking_fee / 1.1)::int ELSE parking_fee END as non_parking_fee   
			 
			
			 
			 , service_vat
			 , vending_vat                 
			 , mul_machine_vat             
			 , equip_vat                   
			 , css_vat                     
			 , cs_vat                      
			 , stationary_vat              
			 , miscellaneous_charge_vat    
			 , beverage_vat                
			 , telephone_vat               
			 , internet_vat                
			 , installation_vat            
			 , it_vat                      
			 , add1_vat                    
			 , add2_vat                    
			 , parking_fee_vat     

			 
	 
			 
			 , service_remark
			 , vending_remark               
			 , mul_machine_remark           
			 , equip_remark                 
			 , css_remark                   
			 , cs_remark                    
			 , stationary_remark            
			 , miscellaneous_charge_remark  
			 , beverage_remark              
			 , telephone_remark             
			 , internet_remark              
			 , installation_remark          
			 , it_remark                    
			 , add1_remark                  
			 , add2_remark                  
			 , parking_fee_remark                  
			 , default_use_period           
			 , default_use_time             
			 , perchase_use_peroid          
			 , perchase_use_time            
			 , issue_status
			 , deposit_status
			 , tax_bill_status
			 , issu_order_num
			 , create_id
			 , update_id
			 , (select nm from saehan.tb_member WHERE member_id = create_id) as create_nm 
		 	 , (select nm from saehan.tb_member WHERE member_id = update_id) as update_nm 
		 	 , issue_month
		 	 , booking_id
  		  from (select r.office_rent_id                             
				     , r.type_name                                  
				     , r.rep_office_name                            
					 , r.company_name 
				     , r.ceo_name 	
				     , r.mgr_name
				     , r.mgr_hp_no
				     , r.mgr_email
					 , i.invoice_id
					 , i.amount  
					 , i.issue_date
					 , i.create_dt
					 , i.start_date
					 , i.end_date
				     , i.rent_charges                                 
				     , i.addition                                                
					 , i.default_offer_time
					 , i.buying_time
					 , i.conference_time
					 , i.fc_time
					 , i.sleeping_time
					 , i.charge_time
					 , i.service
				     , i.vending                                   
				     , i.mul_machine                               
				     , i.equip                                     
				     , i.css                                       
				     , i.cs                                        
				     , i.stationary                                
				     , i.miscellaneous_charge                      
				     , i.beverage                                  
				     , i.telephone                                 
				     , i.internet                                  
				     , i.installation                              
				     , i.it                                        
				     , i.add1                                      
				     , i.add2                                      
				     , i.parking_fee                    
					 , i.service_vat
				     , i.vending_vat                 
				     , i.mul_machine_vat             
				     , i.equip_vat                   
				     , i.css_vat                     
				     , i.cs_vat                      
				     , i.stationary_vat              
				     , i.miscellaneous_charge_vat    
				     , i.beverage_vat                
				     , i.telephone_vat               
				     , i.internet_vat                
				     , i.installation_vat            
				     , i.it_vat                      
				     , i.add1_vat                    
				     , i.add2_vat                    
				     , i.parking_fee_vat   

				     
				     , i.service_remark
				     , i.vending_remark               
				     , i.mul_machine_remark           
				     , i.equip_remark                 
				     , i.css_remark                   
				     , i.cs_remark                    
				     , i.stationary_remark            
				     , i.miscellaneous_charge_remark  
				     , i.beverage_remark              
				     , i.telephone_remark             
				     , i.internet_remark              
				     , i.installation_remark          
				     , i.it_remark                    
				     , i.add1_remark                  
				     , i.add2_remark                  
				     , i.parking_fee_remark                  
				     , i.default_use_period           
				     , i.default_use_time             
				     , i.perchase_use_peroid          
				     , i.perchase_use_time            
				     , i.issue_status
				     , i.deposit_status
				     , i.tax_bill_status
				     , COALESCE(i.issu_order_num ,0) as issu_order_num
				     , i.addition_name
				     , i.create_id
				     , i.update_id
				     , ROW_NUMBER() OVER(ORDER BY COALESCE(i.issu_order_num ,0) desc) as RNUM
				     , i.issue_month
				     , i.booking_id
				  from (select r.office_rent_id                     
						     , r.type                                   
						     , case when r.type = 1  then '오피스'      
						            when r.type = 2  then '지정데스크'  
						        end type_name                            
						     , r.rep_office_name                        
						     , r.company_name
						     , r.ceo_name 	
						     , r.mgr_name
						     , r.mgr_hp_no
						     , r.mgr_email
					  	  from saehan.tb_office_rent r                  
					     where r.office_rent_id = CAST(#{office_rent_id} AS numeric)
					   ) r , saehan.tb_invoice i        
			       where r.office_rent_id = i.office_rent_id 	
					 and i.invoice_id = CAST(#{invoice_id} AS numeric)
 		       ) t  		
		)g
		
	</select>	
	
	<!-- 인보이스 시퀀스 조회 -->
	<select id="getInvoiceIdSeq" parameterType="Map" resultType="Map">
		SELECT nextval('saehan.tb_invoice_invoice_id_seq') as invoice_id_seq
	</select>	
	
	<insert id="insertInvoiceIssuStatus" parameterType="Map">	
	INSERT INTO saehan.tb_invoice 
	(   
         invoice_id									
       , office_rent_id 	
       , company_name					
	   , start_date   							
	   , end_date   								
	   , addition_name  						
	   , rent_charges 							
	   , addition   								
       , default_offer_time 
       , buying_time  
       , conference_time              
       , fc_time   		                      
       , sleeping_time                  
	   , charge_time	
	   , service
	   , vending  									
	   , mul_machine  							
	   , equip  										
	   , css  											
	   , cs   											
	   , stationary   							
	   , miscellaneous_charge 			
	   , beverage   								
	   , telephone  	
	   , internet         
	   , installation        
	   , it             
	   , add1              
	   , add2             
	   , parking_fee
	   							
       , service_remark
	   , vending_remark   					
	   , mul_machine_remark 				
	   , equip_remark   						
	   , css_remark   							
	   , cs_remark  								
	   , stationary_remark					
	   , miscellaneous_charge_remark
	   , beverage_remark   					
	   , telephone_remark
	   , internet_remark         
	   , installation_remark        
	   , it_remark             
	   , add1_remark              
	   , add2_remark             
	   , parking_fee_remark
	     					
	   , issu_order_num 						
	   , issue_date 								
	   , issue_status               
	   , create_id
       , update_id 	
       , create_dt
       , issue_month
       , booking_id
	) 
	VALUES  
	(  
		  #{invoice_id}                                                      
		, CAST(#{office_rent_id} AS numeric)                         
		, #{company_name}                       
		, TO_DATE(#{start_date}, 'YYYY-MM-DD')                                                              
		, TO_DATE(#{end_date}, 'YYYY-MM-DD')                                                                
		, #{addition_name}                                                                                  
		, CAST( COALESCE(#{rent_charges}  	,0)  AS numeric)                                                  
		<choose>
			<when test="addition == null or addition == ''">
			, 0
			</when>
			<otherwise>
			, CAST( COALESCE(#{addition} 		,0)  AS numeric)
			</otherwise>
		</choose>
        , CAST( COALESCE(#{default_offer_time} 	,0)	 AS numeric)
        , CAST( COALESCE(#{buying_time} 	,0)	 AS numeric)
        , CAST( COALESCE(#{conference_time},0) AS numeric)              
        , CAST( COALESCE(#{fc_time} 		,0)	 AS numeric)                      
        , CAST( COALESCE(#{sleeping_time} ,0)	 AS numeric)                
	    , CAST( COALESCE(#{charge_time} 	,0)	 AS numeric)
	    , CAST( COALESCE(#{service} 		,0)	 AS numeric)
		, CAST( COALESCE(#{vending} 		,0)	 AS numeric)                                                    
		, CAST( COALESCE(#{mul_machine}   	,0)	 AS numeric)                                                  
		, CAST( COALESCE(#{equip} 			,0)	 AS numeric)                                                      
		, CAST( COALESCE(#{css} 			,0)	 AS numeric)                                                      
		, CAST( COALESCE(#{cs} 	  			,0)	 AS numeric)                                                      
		, CAST( COALESCE(#{stationary} 		,0)	 AS numeric)                                                    
		, CAST( COALESCE(#{miscellaneous_charge},0) AS numeric)                                             
		, CAST( COALESCE(#{beverage}      	,0)  AS numeric)                                                  
		, CAST( COALESCE(#{telephone}     	,0)  AS numeric)
		, CAST( COALESCE(#{internet}     	,0)  AS numeric)
		, CAST( COALESCE(#{installation}     	,0)  AS numeric)
		, CAST( COALESCE(#{it}     	,0)  AS numeric)
		, CAST( COALESCE(#{add1}     	,0)  AS numeric)
		, CAST( COALESCE(#{add2}     	,0)  AS numeric)
		, CAST( COALESCE(#{parking_fee}     	,0)  AS numeric)
		, #{service_remark}                                                  
		, #{vending_remark}                                                                                 
		, #{mul_machine_remark}                                                                             
		, #{equip_remark}                                                                                   
		, #{css_remark}                                                                                     
		, #{cs_remark}                                                                                      
		, #{stationary_remark}                                                                              
		, #{miscellaneous_charge_remark}                                                                    
		, #{beverage_remark}                                                                                
		, #{telephone_remark}  
		                                                                             
		, #{internet_remark}                                                                               
		, #{installation_remark}                                                                               
		, #{it_remark}                                                                               
		, #{add1_remark}                                                                               
		, #{add2_remark}                                                                               
		, #{parking_fee_remark}                                                                               
		, (SELECT coalesce(MAX(issu_order_num),0)+1 FROM saehan.tb_invoice where office_rent_id = CAST(#{office_rent_id} AS numeric) and issue_month =  to_date(#{issue_month}, 'YYYY-MM-DD') )                                              
		, now()                                                                                             
        , 'Y'    
		<if test="issu_order_num =='0'">
	    , CAST(#{login_id} AS numeric)
        , CAST(#{login_id} AS numeric)									
		</if>
		<if test="issu_order_num !='0'">
		, CAST(#{create_id} AS numeric)
        , CAST(#{login_id} AS numeric)								
		</if>
		, now()
		, to_date(#{issue_month}, 'YYYY-MM-DD')
		, CAST(#{booking_id} AS numeric)
	)  
  </insert>
  
  
  	
	<insert id="insertInvoiceRelativeIssuStatus" parameterType="Map">	
	INSERT INTO saehan.tb_invoice 
	(   
         invoice_id									
       , office_rent_id 	
       , company_name					
	   , start_date   							
	   , end_date   								
	   , addition_name  						
	   , rent_charges 							
	   , addition   								
       , default_offer_time 
       , buying_time  
       , conference_time              
       , fc_time   		                      
       , sleeping_time                  
	   , charge_time	
	   , service
	   , vending  									
	   , mul_machine  							
	   , equip  										
	   , css  											
	   , cs   											
	   , stationary   							
	   , miscellaneous_charge 			
	   , beverage   								
	   , telephone  	
	   , internet         
	   , installation        
	   , it             
	   , add1              
	   , add2             
	   , parking_fee
	   							
       , service_remark
	   , vending_remark   					
	   , mul_machine_remark 				
	   , equip_remark   						
	   , css_remark   							
	   , cs_remark  								
	   , stationary_remark					
	   , miscellaneous_charge_remark
	   , beverage_remark   					
	   , telephone_remark
	   , internet_remark         
	   , installation_remark        
	   , it_remark             
	   , add1_remark              
	   , add2_remark             
	   , parking_fee_remark
	     					
	   , issu_order_num 						
	   , issue_date 								
	   , issue_status               
	   , create_id
       , update_id 	
       , create_dt
       , issue_month
       , booking_id
	) 
	VALUES  
	(  
		  #{invoice_id}                                                      
		, CAST(#{office_rent_id} AS numeric)                         
		, #{company_name}                       
		, TO_DATE(#{start_date}, 'YYYY-MM-DD')                                                              
		, TO_DATE(#{end_date}, 'YYYY-MM-DD')                                                                
		, #{addition_name}                                                                                  
		, CAST( COALESCE(#{rent_charges}  	,0)  AS numeric)                                                  
		<choose>
			<when test="addition == null or addition == ''">
			, 0
			</when>
			<otherwise>
			, CAST( COALESCE(#{addition} 		,0)  AS numeric)
			</otherwise>
		</choose>
        , CAST( COALESCE(#{default_offer_time} 	,0)	 AS numeric)
        , CAST( COALESCE(#{buying_time} 	,0)	 AS numeric)
        , CAST( COALESCE(#{conference_time},0) AS numeric)              
        , CAST( COALESCE(#{fc_time} 		,0)	 AS numeric)                      
        , CAST( COALESCE(#{sleeping_time} ,0)	 AS numeric)                
	    , CAST( COALESCE(#{charge_time} 	,0)	 AS numeric)
	    , CAST( COALESCE(#{service} 		,0)	 AS numeric)
		, CAST( COALESCE(#{vending} 		,0)	 AS numeric)                                                    
		, CAST( COALESCE(#{mul_machine}   	,0)	 AS numeric)                                                  
		, CAST( COALESCE(#{equip} 			,0)	 AS numeric)                                                      
		, CAST( COALESCE(#{css} 			,0)	 AS numeric)                                                      
		, CAST( COALESCE(#{cs} 	  			,0)	 AS numeric)                                                      
		, CAST( COALESCE(#{stationary} 		,0)	 AS numeric)                                                    
		, CAST( COALESCE(#{miscellaneous_charge},0) AS numeric)                                             
		, CAST( COALESCE(#{beverage}      	,0)  AS numeric)                                                  
		, CAST( COALESCE(#{telephone}     	,0)  AS numeric)
		, CAST( COALESCE(#{internet}     	,0)  AS numeric)
		, CAST( COALESCE(#{installation}     	,0)  AS numeric)
		, CAST( COALESCE(#{it}     	,0)  AS numeric)
		, CAST( COALESCE(#{add1}     	,0)  AS numeric)
		, CAST( COALESCE(#{add2}     	,0)  AS numeric)
		, CAST( COALESCE(#{parking_fee}     	,0)  AS numeric)
		, #{service_remark}                                                  
		, #{vending_remark}                                                                                 
		, #{mul_machine_remark}                                                                             
		, #{equip_remark}                                                                                   
		, #{css_remark}                                                                                     
		, #{cs_remark}                                                                                      
		, #{stationary_remark}                                                                              
		, #{miscellaneous_charge_remark}                                                                    
		, #{beverage_remark}                                                                                
		, #{telephone_remark}  
		                                                                             
		, #{internet_remark}                                                                               
		, #{installation_remark}                                                                               
		, #{it_remark}                                                                               
		, #{add1_remark}                                                                               
		, #{add2_remark}                                                                               
		, #{parking_fee_remark}                                                                               
		, (SELECT coalesce(MAX(issu_order_num),0)+1 FROM saehan.tb_invoice where booking_id = CAST(#{booking_id} AS numeric))                                              
		, now()                                                                                             
        , 'Y'    
		<if test="issu_order_num =='0'">
	    , CAST(#{login_id} AS numeric)
        , CAST(#{login_id} AS numeric)									
		</if>
		<if test="issu_order_num !='0'">
		, CAST(#{create_id} AS numeric)
        , CAST(#{login_id} AS numeric)								
		</if>
		, now()
		, to_date(#{issue_month}, 'YYYY-MM-DD')
		, CAST(#{booking_id} AS numeric)
	)  
	</insert>  
	
	
	<update id="saveTaxInvoice" parameterType="Map">
	UPDATE saehan.tb_invoice
	   SET tax_bill_status =  #{tax_bill_status}
	     , update_id = CAST(#{login_id} AS numeric)
	     , create_dt = now()      
     WHERE invoice_id = cast(#{invoice_id} as numeric)
	</update>	
	
	<update id="saveDepositInvoice" parameterType="Map">
	UPDATE saehan.tb_invoice
	   SET deposit_status = #{deposit_status}
	     , update_id = CAST(#{login_id} AS numeric)
	     , create_dt = now()      
     WHERE invoice_id = cast(#{invoice_id} as numeric)
	</update>	
	
	<select id="deleteInvoiceStatus" parameterType="Map">
	DELETE FROM saehan.tb_invoice
     WHERE invoice_id = cast(#{invoice_id} as numeric)
	</select>	
	
	<!-- 예약현환 >> 회의실  목록  조회 : 칼린터용 -->
	<select id="getMeetingRoomListForCalc" parameterType="Map" resultType="Map">
	SELECT a.conference_id
	     , a.room_name
	  FROM saehan.tb_conference a
	     , saehan.tb_branch b  		    
	 WHERE a.branch_id = b.branch_id
       AND (a.del_yn = 'n' or a.del_yn = 'N')
	   AND a.state != 'R'
 	 order by conference_id
	</select>
		
	<!-- 회의실  예약 현황  조회 -->
	<sql id="getMeetinRoomUseStatusSql">
	SELECT ROW_NUMBER() OVER(ORDER BY t1.conference_id asc) as RNUM
	     , t2.booking_conference_id as booking_conference_id
	     , t1.conference_id as conference_id
	     , t1.room_name as room_name
	     , t1.floor as floor
	     , t2.company_name as company_name
	     , t2.booking_date as booking_date
	     , t2.start_time as start_time
	     , t2.end_time as end_time
	     , to_char(t2.meeting_time, 'HH24') as meeting_time
         , (select count(*) from saehan.tb_booking_participant WHERE booking_conference_id = t2.booking_conference_id) as count_member
      FROM (SELECT a.conference_id
				 , a.room_name
				 , a.room_size
				 , a.floor
			     , a.start_time
				 , a.end_time
				 , a.state
				 , a.fixed_equip
	 			 , ROW_NUMBER() OVER(ORDER BY a.conference_id asc) as RNUM
	   		  FROM saehan.tb_conference a
	   		     , saehan.tb_branch b
	  		 WHERE a.branch_id = b.branch_id
			   AND a.del_yn = 'N'
			<if test="floor != null and floor !=''">
			  and a.floor like CONCAT('%', #{floor}, '%')
			</if>
			<if test="conference_id != null and conference_id !=''">
			  and a.conference_id = #{conference_id}::int
			</if>
			
			) t1, (SELECT c.booking_conference_id
			            , c.conference_id
					    , c.meeting_start_time
						, c.meeting_end_time
						, c.meeting_end_time - c.meeting_start_time as meeting_time
					    , to_char(c.meeting_start_time,'YYYY-MM-DD') as booking_date
					    , to_char(c.meeting_start_time,'hh24:mi') as start_time
					    , to_char(c.meeting_end_time,'hh24:mi') as end_time						
						, (select company_name from saehan.tb_member WHERE member_id = c.member_id) as company_name
						, (select nm from saehan.tb_member WHERE member_id = c.member_id) as member_nm 
	   		        FROM  saehan.tb_booking_conference c 
	   		       WHERE c.meeting_start_time between #{targetStartDate}::timestamp and #{targetEndDate}::timestamp 
	                  or c.meeting_end_time between #{targetStartDate}::timestamp and #{targetEndDate}::timestamp 
	               order by conference_id, meeting_start_time
       		     ) t2
	    WHERE t1.conference_id = t2.conference_id
		<if test="searchType != null and searchType !=''">
		  and t2.company_name like CONCAT('%', #{searchType}, '%')
		</if>
	</sql>
	
	<!-- 회의실  예약 현황  조회 -->
	<select id="getMeetinRoomUseStatusList" parameterType="Map" resultType="Map">
	
	<include refid="com.anylogic.iot.api.common.mapper.CommonMapper.pagingHeaderSql" />
	<include refid="getMeetinRoomUseStatusSql"/>
	<include refid="com.anylogic.iot.api.common.mapper.CommonMapper.pagingFooterSql" />    	  

	</select>
	
	<select id="getMeetinRoomUseStatusExcel" parameterType="Map" resultType="com.anylogic.iot.api.admin.calc.vo.MeetinRoomUseStatusVO">
    	<include refid="getMeetinRoomUseStatusSql"/>
	</select>

	<!-- 회의실  예약 현황  Calendar -->
	<select id="getMeetinRoomUseStatusCalendar" parameterType="Map" resultType="Map">
	SELECT ROW_NUMBER() OVER(ORDER BY t1.conference_id asc) as RNUM
	     , t2.booking_conference_id
	     , t1.conference_id
	     , t1.room_name
	     , t1.floor
	     , t1.branch_id
	     , t2.company_name
	     , t2.booking_date
	     , t2.start_time
	     , t2.end_time
	     , t2.booking_type
	     , to_char(t2.meeting_time, 'HH24') as meeting_time
         , (select count(*) from saehan.tb_booking_participant WHERE booking_conference_id = t2.booking_conference_id) as count_member
      FROM (SELECT a.conference_id
				 , a.room_name
				 , a.room_size
				 , a.floor
			     , a.start_time
				 , a.end_time
				 , a.state
				 , a.fixed_equip
				 , a.branch_id
	 			 , ROW_NUMBER() OVER(ORDER BY a.conference_id asc) as RNUM
	   		  FROM saehan.tb_conference a
	   		     , saehan.tb_branch b
	  		 WHERE a.branch_id = b.branch_id
			   AND a.del_yn = 'N'
			<if test="floor != null and floor !=''">
			  and a.floor like CONCAT('%', #{floor}, '%')
			</if>
			<if test="conference_id != null and conference_id !=''">
			  and a.conference_id = #{conference_id}::int
			</if>
			
			) t1, (SELECT c.booking_conference_id
			            , c.conference_id
					    , c.meeting_start_time
						, c.meeting_end_time
						, c.meeting_end_time - c.meeting_start_time as meeting_time
					    , to_char(c.meeting_start_time,'YYYY-MM-DD') as booking_date
					    , to_char(c.meeting_start_time,'hh24:mi') as start_time
					    , to_char(c.meeting_end_time,'hh24:mi') as end_time						
						, (select company_name from saehan.tb_member WHERE member_id = c.member_id) as company_name
						, (select nm from saehan.tb_member WHERE member_id = c.member_id) as member_nm 
						, c.booking_type as booking_type
	   		        FROM  saehan.tb_booking_conference c 
	   		       <!-- WHERE 
	   		       c.meeting_start_time between #{targetStartDate}::timestamp and #{targetEndDate}::timestamp 
	                  or c.meeting_end_time between #{targetStartDate}::timestamp and #{targetEndDate}::timestamp  -->
	               order by conference_id, meeting_start_time
       		     ) t2
	    WHERE t1.conference_id = t2.conference_id
		<if test="searchType != null and searchType !=''">
		  and t2.company_name like CONCAT('%', #{searchType}, '%')
		</if>
	</select>


	<!-- F/C 예약현환 >> F/C 목록  조회 : 칼린터용 -->
	<select id="getFacilityList" parameterType="Map" resultType="Map">
	    SELECT a.facility_id
		     , a.branch_id
		     , a.type
   		     , (select branch_name from saehan.tb_branch where branch_id = a.branch_id) as branch_name
		     , a.floor
		     , a.room_name
		     , a.acceptor_number
		     , a.basic_use_hour
		     , a.basic_use_fee
			 , to_char(a.operation_open_time, 'HH24') operation_open_time
			 , to_char(a.operation_close_time, 'HH24') operation_close_time
		     , a.state
			 , CASE a.state  
				   WHEN 'U' THEN '사용중' 
				   WHEN 'W' THEN '공실'
				   WHEN 'R' THEN '수리중'
	   			   ELSE '' 
			   END as state_nm
			 , ROW_NUMBER() OVER(ORDER BY facility_id) as RNUM
   		  FROM saehan.tb_facility a
   		     , saehan.tb_branch b  		    
  		 WHERE a.branch_id = b.branch_id
		   AND a.del_yn = 'N'

	</select>

	<!-- 편의시설 예약 현황  조회 -->
	<sql id="getFacilityUseStatusSql">
	SELECT ROW_NUMBER() OVER(ORDER BY t1.facility_id, t2.booking_start_time) as RNUM
	     , t2.booking_facility_id
	     , t1.facility_id
	     , t1.type_nm
	     , t1.room_name
	     , t2.company_name
	     , t2.member_nm
	     , t2.booking_date
	     , t2.start_time
	     , t2.end_time
	     , t2.use_time
	     , t2.booking_start_time
      FROM (SELECT a.facility_id
			     , a.branch_id
			     , a.type
				 , CASE a.type  
					   WHEN 'FC' THEN '에너지존' 
					   WHEN 'F' THEN  '에너지존'
					   WHEN 'S' THEN '릴렉스존 '
		   			   ELSE '' 
				   END type_nm
				 , a.room_name
			     , a.floor
			     , a.acceptor_number
			     , a.basic_use_hour
			     , a.basic_use_fee
			     , a.operation_open_time
			     , a.operation_close_time
			     , a.state
   		  FROM saehan.tb_facility a
   		     , saehan.tb_branch b  
	  		 WHERE a.branch_id = b.branch_id
			   AND a.del_yn = 'N'
			<if test="facility_id != null and facility_id !=''">
			   AND a.facility_id = #{facility_id}::int
			</if>
			   
			) t1, (SELECT c.booking_facility_id
			            , c.facility_id
					    , c.booking_start_time
						, c.booking_end_time
						, to_char(c.booking_start_time,'YYYY-MM-DD') as booking_date
						, to_char(c.booking_start_time,'hh24:mi') as start_time
						, to_char(c.booking_end_time,'hh24:mi') as end_time						
					    , (select company_name from saehan.tb_member WHERE member_id = cast(c.member_id as INTEGER)   ) as company_name
					    , (select nm from saehan.tb_member WHERE member_id = cast(c.member_id as INTEGER) ) as member_nm 
					    , c.use_time
	   		        FROM  saehan.tb_booking_facility c 
	   		       WHERE c.booking_start_time between #{targetStartDate}::timestamp and #{targetEndDate}::timestamp 
	                  or c.booking_end_time between #{targetStartDate}::timestamp and #{targetEndDate}::timestamp 
       		     ) t2
	    WHERE t1.facility_id = t2.facility_id
		<if test="searchType != null and searchType !=''">
		  and t2.company_name like CONCAT('%', #{searchType}, '%')
		</if>
	</sql>
			
	<!-- 편의시설 예약 현황  조회 -->
	<select id="getFacilityUseStatusList" parameterType="Map" resultType="Map">
		<include refid="com.anylogic.iot.api.common.mapper.CommonMapper.pagingHeaderSql" />
		<include refid="getFacilityUseStatusSql"/>
		<include refid="com.anylogic.iot.api.common.mapper.CommonMapper.pagingFooterSql" />    	  
	</select>

	<select id="getFacilityUseStatusExcel" parameterType="Map" resultType="com.anylogic.iot.api.admin.calc.vo.MeetinRoomUseStatusVO">
    	<include refid="getFacilityUseStatusSql"/>
	</select>
	
	<!-- 편의시설 예약 현황  Calenda -->
	<select id="getFacilityUseStatusCalendar" parameterType="Map" resultType="Map">
	SELECT ROW_NUMBER() OVER(ORDER BY t1.facility_id, t2.booking_start_time) as RNUM
	     , t2.booking_facility_id
	     , t1.facility_id
	     , t1.type_nm
	     , t1.room_name
	     , t2.company_name
	     , t2.member_nm
	     , t2.booking_date
	     , t2.start_time
	     , t2.end_time
	     , t2.use_time
	     , t2.booking_start_time
      FROM (SELECT a.facility_id
			     , a.branch_id
			     , a.type
				 , CASE a.type  
					   WHEN 'FC' THEN '에너지존' 
					   WHEN 'F' THEN  '에너지존'
					   WHEN 'S' THEN '릴렉스존 '
		   			   ELSE '' 
				   END type_nm
				 , a.room_name
			     , a.floor
			     , a.acceptor_number
			     , a.basic_use_hour
			     , a.basic_use_fee
			     , a.operation_open_time
			     , a.operation_close_time
			     , a.state
   		  FROM saehan.tb_facility a
   		     , saehan.tb_branch b  
	  		 WHERE a.branch_id = b.branch_id
			   AND a.del_yn = 'N'
			<if test="facility_id != null and facility_id !=''">
			   AND a.facility_id = #{facility_id}::int
			</if>
			   
			) t1, (SELECT c.booking_facility_id
			            , c.facility_id
					    , c.booking_start_time
						, c.booking_end_time
						, to_char(c.booking_start_time,'YYYY-MM-DD') as booking_date
						, to_char(c.booking_start_time,'hh24:mi') as start_time
						, to_char(c.booking_end_time,'hh24:mi') as end_time						
					    , (select company_name from saehan.tb_member WHERE member_id = cast(c.member_id as INTEGER)   ) as company_name
					    , (select nm from saehan.tb_member WHERE member_id = cast(c.member_id as INTEGER) ) as member_nm 
					    , c.use_time
	   		        FROM  saehan.tb_booking_facility c 
	   		      <!--  WHERE c.booking_start_time between #{targetStartDate}::timestamp and #{targetEndDate}::timestamp 
	                  or c.booking_end_time between #{targetStartDate}::timestamp and #{targetEndDate}::timestamp  -->
       		     ) t2
	    WHERE t1.facility_id = t2.facility_id
		<if test="searchType != null and searchType !=''">
		  and t2.company_name like CONCAT('%', #{searchType}, '%')
		</if>
	</select>	
		
	<!-- 복합기 사용 현황  조회 -->
	<select id="getMulMachineUseStatusList" parameterType="Map" resultType="Map">

 	<include refid="com.anylogic.iot.api.common.mapper.CommonMapper.pagingHeaderSql" />
		select ROW_NUMBER() OVER(ORDER BY created_date desc) as RNUM
		     , t.company_name
			 , t.member_nm
			 , t.paper_type
			 , t.color
			 , t.print_count
			 , t.created_date
			 , t.amount
		 from (	 
				SELECT m.mul_machine_serial
					 , (select company_name from saehan.tb_member WHERE member_id= m.member_id ) as company_name 
					 , (select nm from saehan.tb_member WHERE member_id = m.member_id ) as member_nm
					 , m.paper_type     
				     , case when m.color = 'C' then '컬러' else '흑백' end as color
				     , m.print_count
				     , to_char(m.created_date,'YYYY-MM-DD hh24:mi:ss') as created_date
				     , TO_CHAR(amount,'FM9,999,999,999,999,999') as amount
				     , m.job_id
					 , m.job_seq
			      FROM saehan.tb_mul_machine_use m
	   		     WHERE m.created_date between #{stDt}::timestamp and #{enDt}::timestamp 
			  ) t
		<if test="company_name != null and company_name !=''">
		  where t.company_name like CONCAT('%', #{company_name}, '%')
		</if>
 	<include refid="com.anylogic.iot.api.common.mapper.CommonMapper.pagingFooterSql" />   
	</select>

	<!-- 복합기 사용 현황  조회 -->
	<select id="getMulMachineUseStatusListExcel" parameterType="Map" resultType="com.anylogic.iot.api.admin.calc.vo.MulMachineUseVO">
		select ROW_NUMBER() OVER(ORDER BY created_date desc) as RNUM
		     , t.company_name
			 , t.member_nm
			 , t.paper_type
			 , t.color
			 , t.print_count
			 , t.created_date
			 , t.amount
		 from (	 
				SELECT m.mul_machine_serial
					  , (select company_name from saehan.tb_member WHERE member_id= m.member_id ) as company_name 
					 , (select nm from saehan.tb_member WHERE member_id = m.member_id ) as member_nm
					 , m.paper_type     
				     , case when m.color = 'C' then '컬러' else '흑백' end as color
				     , m.print_count
				     , to_char(m.created_date,'YYYY-MM-DD hh24:mi:ss') as created_date
				     , TO_CHAR(amount,'FM9,999,999,999,999,999') as amount
				     , m.job_id
					 , m.job_seq
			      FROM saehan.tb_mul_machine_use m
	   		     WHERE m.created_date between #{stDt}::timestamp and #{enDt}::timestamp 
			  ) t
		<if test="company_name != null and company_name !=''">
		  where t.company_name like CONCAT('%', #{company_name}, '%')
		</if>
	</select>

	
	<!-- 벤딩머신 사용 현황  조회 -->
	<select id="getVndMachUseStatusList" parameterType="Map" resultType="Map">

	<include refid="com.anylogic.iot.api.common.mapper.CommonMapper.pagingHeaderSql" />
		select ROW_NUMBER() OVER(ORDER BY buying_time desc) as RNUM
		     , t.company_name
			 , t.member_nm
			 , t.item_name
			 , '' as purchase_number
			 , t.buying_time
			 , t.price
		 from (	 
				SELECT m.vending_id
					 , (select company_name from saehan.tb_member WHERE member_id = cast(m.member_id as INTEGER)   ) as company_name 
					 , (select nm from saehan.tb_member WHERE member_id = cast(m.member_id as INTEGER) ) as member_nm
					 , m.item_cd
					 , m.item_name     
				     , m.sale_order_no
				     , TO_CHAR(m.price,'FM9,999,999,999,999,999') as price
				     , to_char(m.created_date,'YYYY-MM-DD hh24:mi:ss') as buying_time
			      FROM saehan.tb_vending_use m
	   		     WHERE m.created_date between #{targetStartDate}::timestamp and #{targetEndDate}::timestamp 
	   		     and m.payment_type = '1'
			  ) t
		<if test="searchType != null and searchType !=''">
		  where t.company_name like CONCAT('%', #{searchType}, '%')
		</if>

	<include refid="com.anylogic.iot.api.common.mapper.CommonMapper.pagingFooterSql" />    	  

	</select>	



	
	<!-- 벤딩머신 사용 현황  조회 -->
	<select id="getVndMachUseStatusListExcel" parameterType="Map" resultType="com.anylogic.iot.api.admin.calc.vo.VendingUseVO">

		select ROW_NUMBER() OVER(ORDER BY buying_time desc) as RNUM
		     , t.company_name
			 , t.member_nm
			 , t.item_name
			 , t.count
			 , t.buying_time as created_date
			 , t.price
		 from (	 
				SELECT m.vending_id
					 , (select company_name from saehan.tb_member WHERE member_id = cast(m.member_id as INTEGER)   ) as company_name 
					 , (select nm from saehan.tb_member WHERE member_id = cast(m.member_id as INTEGER) ) as member_nm
					 , m.item_cd
					 , m.item_name
					 , m.count
				     , m.sale_order_no
				     , TO_CHAR(m.price,'FM9,999,999,999,999,999') as price
				     , to_char(m.created_date,'YYYY-MM-DD hh24:mi:ss') as buying_time
			      FROM saehan.tb_vending_use m
	   		     WHERE m.created_date between #{targetStartDate}::timestamp and #{targetEndDate}::timestamp 
	   		     and m.payment_type = '1'
			  ) t
		<if test="searchType != null and searchType !=''">
		  where t.company_name like CONCAT('%', #{searchType}, '%')
		</if>  

	</select>	



	<!-- 집계 현황(월간)-->
	<select id="getReportMonthlyStatList" parameterType="Map" resultType="Map">

		with t as (
			select issue_month, office_sum, facility, addition, (office_sum + facility + addition) as total
			from (
				select issue_month, (office  
					+ coalesce( ( 	
						select sum(pp.price) from saehan.tb_purchase_product PP, saehan.tb_product p
						where PP.product_id = p.product_id and p.type = 'D' and date_trunc('month',  PP.payment_date::date)::date = issue_month
					 )::real/1.1 , 0) ) as office_sum
					, facility, addition
				from (
					select date_trunc('month',  i.issue_month::date)::date as issue_month , 
						coalesce(sum(i.rent_charges), 0) as office,
						coalesce(sum(i.service), 0) as facility,
						coalesce(sum(vending::real/1.1 + mul_machine+ equip + CSS + CS + stationary + miscellaneous_charge + beverage + telephone + installation + it + add1 + add2 + parking_fee), 0) as addition
					from saehan.tb_invoice as i
					inner join
					(
						select date_trunc('month', issue_month::date)::date as issue_month, office_rent_id, max(issu_order_num) as issu_order_num 
						from saehan.tb_invoice
						where (office_rent_id ) in 
							( select office_rent_id from saehan.tb_office_rent
							where virtual_contract = 'N' )
								and EXTRACT(year from issue_month) in ( #{work_year}::int, #{work_year}::int - 1 )
								and tax_bill_status in ('Y') and issu_order_num > 0 
						group by date_trunc('month', issue_month::date)::date, office_rent_id
						order by date_trunc('month', issue_month::date)::date
					) as k
					on i.office_rent_id = k.office_rent_id and i.issue_month = k.issue_month and i.issu_order_num = k.issu_order_num
					group by i.issue_month
				) a
			) b
		)
		select 
				to_char(t1.issue_month, 'YYYY-MM') as issue_month
				, TO_CHAR(round(t1.office_sum)		, 'FM9,999,999,999,999,999') as office_sum
				, TO_CHAR(round(t1.facility) 			, 'FM9,999,999,999,999,999') as facility
				, TO_CHAR(round(t1.addition) 		, 'FM9,999,999,999,999,999') as addition
				, round(t1.total) as total
				, round((t1.total - t2.total) * 100.0 / t2.total) / 100 || '%' as ratio
				, round(t1.total) as total1
				, round(t2.total) as total2
		from t as t1
		left outer join
		(	select * from t	) as t2
		on t1.issue_month = (date_trunc('month',  t2.issue_month::date + interval '1 month')::date)
		where EXTRACT(year from t1.issue_month) in ( #{work_year}::int )
		order by t1.issue_month asc

    </select>	
    
    
		<!-- 집계 현황 Excel(월간)-->
	<select id="getReportMonthlyStatListExcel" parameterType="Map" resultType="com.anylogic.iot.api.admin.calc.vo.MonthlySumVO">
		      

		with t as (
			select issue_month, office_sum, facility, addition, (office_sum + facility + addition) as total
			from (
				select issue_month, (office  
					+ coalesce( ( 	
						select sum(pp.price) from saehan.tb_purchase_product PP, saehan.tb_product p
						where PP.product_id = p.product_id and p.type = 'D' and date_trunc('month',  PP.payment_date::date)::date = issue_month
					 )::real/1.1 , 0) ) as office_sum
					, facility, addition
				from (
					select date_trunc('month',  i.issue_month::date)::date as issue_month , 
						coalesce(sum(i.rent_charges), 0) as office,
						coalesce(sum(i.service), 0) as facility,
						coalesce(sum(vending::real/1.1 + mul_machine+ equip + CSS + CS + stationary + miscellaneous_charge + beverage + telephone + installation + it + add1 + add2 + parking_fee), 0) as addition
					from saehan.tb_invoice as i
					inner join
					(
						select date_trunc('month', issue_month::date)::date as issue_month, office_rent_id, max(issu_order_num) as issu_order_num 
						from saehan.tb_invoice
						where (office_rent_id ) in 
							( select office_rent_id from saehan.tb_office_rent
							where virtual_contract = 'N' )
								and EXTRACT(year from issue_month) in ( #{work_year}::int, #{work_year}::int - 1 )
								and tax_bill_status in ('Y') and issu_order_num > 0 
						group by date_trunc('month', issue_month::date)::date, office_rent_id
						order by date_trunc('month', issue_month::date)::date
					) as k
					on i.office_rent_id = k.office_rent_id and i.issue_month = k.issue_month and i.issu_order_num = k.issu_order_num
					group by i.issue_month
				) a
			) b
		)
		select 
				to_char(t1.issue_month, 'YYYY-MM') as issue_month
				, TO_CHAR(round(t1.office_sum)		, 'FM9,999,999,999,999,999') as office_sum
				, TO_CHAR(round(t1.facility) 			, 'FM9,999,999,999,999,999') as facility
				, TO_CHAR(round(t1.addition) 		, 'FM9,999,999,999,999,999') as addition
				, round(t1.total) as total
				, round((t1.total - t2.total) * 100.0 / t2.total) / 100 || '%' as ratio
				, round(t1.total) as total1
				, round(t2.total) as total2
		from t as t1
		left outer join
		(	select * from t	) as t2
		on t1.issue_month = (date_trunc('month',  t2.issue_month::date + interval '1 month')::date)
		where EXTRACT(year from t1.issue_month) in ( #{work_year}::int )
		order by t1.issue_month asc


    </select>	

	

	<select id="getReportOfficeStatList" parameterType="Map" resultType="Map">
	select issue_mon	
	     , mon_sum
	     , use_18 || ' / ' || all_18 as use_18
	     , use_19 || ' / ' || all_19 as use_19
	     , round(case when use_18 = 0 then 0 else use_18 * 100 / all_18 end,2) || '%' as use_rate_18
	     , round(case when use_19 = 0 then 0 else use_19 * 100 / all_19 end,2)  || '%' as use_rate_19
	     , use_18 + use_19 || ' / ' || all_18 + all_19 as use_total
	     , round(case when use_total = 0 then 0 else use_total * 100 / mon_sum end,2)  || '%' as use_rate_total
	  from (with m as (
			      SELECT TO_CHAR(issue_dt, 'Mon') issue_mon
			           , issue_dt
			      	   , floor
			      	   , sum(sum) as sum
			      	   , sum(use) as use
					FROM saehan.tb_floor_use_stat
				   where EXTRACT(YEAR FROM issue_dt) = #{work_year}::int
				   group by issue_dt, TO_CHAR(issue_dt, 'Mon'), floor
				   order by TO_CHAR(issue_dt, 'MM'), floor
			)
			select issue_mon 
			     , sum(t.sum) as mon_sum
			     , (select use from m where m.issue_mon = t.issue_mon and m.floor ='18') as use_18
			     , (select sum from m where m.issue_mon = t.issue_mon and m.floor = '18') as all_18
			     , (select use from m where m.issue_mon = t.issue_mon and m.floor ='19') as use_19
			     , (select sum from m where m.issue_mon = t.issue_mon and m.floor = '19') as all_19
			     , (select sum(use) from m where m.issue_mon = t.issue_mon) as use_total
			from m t
			group by issue_mon, TO_CHAR(issue_dt, 'MM')
			order by TO_CHAR(issue_dt, 'MM')
		   ) p
    </select>	
			      		
	<select id="getReportOfficeStatExcel" parameterType="Map" resultType="com.anylogic.iot.api.admin.calc.vo.OfficeUseStatusVO">
	select issue_mon	
	     , mon_sum
	     , use_18 || ' / ' || all_18 as use_18
	     , use_19 || ' / ' || all_19 as use_19
	     , round(case when use_18 = 0 then 0 else use_18 * 100 / all_18 end,2) || '%' as use_rate_18
	     , round(case when use_19 = 0 then 0 else use_19 * 100 / all_19 end,2)  || '%' as use_rate_19
	     , use_18 + use_19 || ' / ' || all_18 + all_19 as use_total
	     , round(case when use_total = 0 then 0 else use_total * 100 / mon_sum end,2)  || '%' as use_rate_total
	  from (with m as (
			      SELECT TO_CHAR(issue_dt, 'Mon') issue_mon
			           , issue_dt
			      	   , floor
			      	   , sum(sum) as sum
			      	   , sum(use) as use
					FROM saehan.tb_floor_use_stat
				   where EXTRACT(YEAR FROM issue_dt) = #{work_year}::int
				   group by issue_dt, TO_CHAR(issue_dt, 'Mon'), floor
				   order by TO_CHAR(issue_dt, 'MM'), floor
			)
			select issue_mon 
			     , sum(t.sum) as mon_sum
			     , (select use from m where m.issue_mon = t.issue_mon and m.floor ='18') as use_18
			     , (select sum from m where m.issue_mon = t.issue_mon and m.floor = '18') as all_18
			     , (select use from m where m.issue_mon = t.issue_mon and m.floor ='19') as use_19
			     , (select sum from m where m.issue_mon = t.issue_mon and m.floor = '19') as all_19
			     , (select sum(use) from m where m.issue_mon = t.issue_mon) as use_total
			from m t
			group by issue_mon, TO_CHAR(issue_dt, 'MM')
			order by TO_CHAR(issue_dt, 'MM')
		   ) p
	</select>

</mapper>
